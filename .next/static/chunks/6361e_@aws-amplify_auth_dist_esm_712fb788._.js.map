{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/errors/AuthError.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/errors/AuthError.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyError, } from '@aws-amplify/core/internals/utils';\nexport class AuthError extends AmplifyError {\n    constructor(params) {\n        super(params);\n        // Hack for making the custom error class work when transpiled to es5\n        // TODO: Delete the following 2 lines after we change the build target to >= es2015\n        this.constructor = AuthError;\n        Object.setPrototypeOf(this, AuthError.prototype);\n    }\n}\n"],"names":[],"mappings":";;;;;;AAAA,qEAAA;AACA,sCAAA;AAEO,MAAM,SAAS,SAAS,2OAAY,CAAC;IACxC,WAAW,CAAC,MAAM,CAAE;QAChB,KAAK,CAAC,MAAM,CAAC;QACrB,qEAAA;QACA,mFAAA;QACQ,IAAI,CAAC,WAAW,GAAG,SAAS;QAC5B,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC;IACpD;AACJ","debugId":null}},
    {"offset": {"line": 27, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/errors/utils/assertServiceError.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/errors/utils/assertServiceError.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AmplifyErrorCode, } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../AuthError';\nexport function assertServiceError(error) {\n    if (!error ||\n        error.name === 'Error' ||\n        error instanceof TypeError) {\n        throw new AuthError({\n            name: AmplifyErrorCode.Unknown,\n            message: 'An unknown error has occurred.',\n            underlyingError: error,\n        });\n    }\n}\n"],"names":[],"mappings":";;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAGO,SAAS,kBAAkB,CAAC,KAAK,EAAE;IACtC,IAAI,CAAC,KAAK,IACN,KAAK,CAAC,IAAI,KAAK,OAAO,IACtB,KAAK,YAAY,SAAS,EAAE;QAC5B,MAAM,IAAI,qOAAS,CAAC;YAChB,IAAI,EAAE,wOAAgB,CAAC,OAAO;YAC9B,OAAO,EAAE,gCAAgC;YACzC,eAAe,EAAE,KAAK;QAClC,CAAS,CAAC;IACN;AACJ","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/foundation/parsers/regionParsers.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/foundation/parsers/regionParsers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthError } from '../../errors/AuthError';\nexport function getRegionFromUserPoolId(userPoolId) {\n    const region = userPoolId?.split('_')[0];\n    if (!userPoolId ||\n        userPoolId.indexOf('_') < 0 ||\n        !region ||\n        typeof region !== 'string')\n        throw new AuthError({\n            name: 'InvalidUserPoolId',\n            message: 'Invalid user pool id provided.',\n        });\n    return region;\n}\nexport function getRegionFromIdentityPoolId(identityPoolId) {\n    if (!identityPoolId || !identityPoolId.includes(':')) {\n        throw new AuthError({\n            name: 'InvalidIdentityPoolIdException',\n            message: 'Invalid identity pool id provided.',\n            recoverySuggestion: 'Make sure a valid identityPoolId is given in the config.',\n        });\n    }\n    return identityPoolId.split(':')[0];\n}\n"],"names":[],"mappings":";;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAEO,SAAS,uBAAuB,CAAC,UAAU,EAAE;IAChD,MAAM,MAAM,2DAAG,UAAU,CAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACxC,IAAI,CAAC,UAAU,IACX,UAAU,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,IAC3B,CAAC,MAAM,IACP,OAAO,MAAM,KAAK,QAAQ,EAC1B,MAAM,IAAI,qOAAS,CAAC;QAChB,IAAI,EAAE,mBAAmB;QACzB,OAAO,EAAE,gCAAgC;IACrD,CAAS,CAAC;IACN,OAAO,MAAM;AACjB;AACO,SAAS,2BAA2B,CAAC,cAAc,EAAE;IACxD,IAAI,CAAC,cAAc,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;QAClD,MAAM,IAAI,qOAAS,CAAC;YAChB,IAAI,EAAE,gCAAgC;YACtC,OAAO,EAAE,oCAAoC;YAC7C,kBAAkB,EAAE,0DAA0D;QAC1F,CAAS,CAAC;IACN;IACA,OAAO,cAAc,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACvC","debugId":null}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/errors/constants.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/errors/constants.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthError } from './AuthError';\nexport const USER_UNAUTHENTICATED_EXCEPTION = 'UserUnAuthenticatedException';\nexport const USER_ALREADY_AUTHENTICATED_EXCEPTION = 'UserAlreadyAuthenticatedException';\nexport const DEVICE_METADATA_NOT_FOUND_EXCEPTION = 'DeviceMetadataNotFoundException';\nexport const AUTO_SIGN_IN_EXCEPTION = 'AutoSignInException';\nexport const INVALID_REDIRECT_EXCEPTION = 'InvalidRedirectException';\nexport const INVALID_APP_SCHEME_EXCEPTION = 'InvalidAppSchemeException';\nexport const INVALID_PREFERRED_REDIRECT_EXCEPTION = 'InvalidPreferredRedirectUrlException';\nexport const invalidRedirectException = new AuthError({\n    name: INVALID_REDIRECT_EXCEPTION,\n    message: 'signInRedirect or signOutRedirect had an invalid format or was not found.',\n    recoverySuggestion: 'Please make sure the signIn/Out redirect in your oauth config is valid.',\n});\nexport const invalidAppSchemeException = new AuthError({\n    name: INVALID_APP_SCHEME_EXCEPTION,\n    message: 'A valid non-http app scheme was not found in the config.',\n    recoverySuggestion: 'Please make sure a valid custom app scheme is present in the config.',\n});\nexport const invalidPreferredRedirectUrlException = new AuthError({\n    name: INVALID_PREFERRED_REDIRECT_EXCEPTION,\n    message: 'The given preferredRedirectUrl does not match any items in the redirectSignOutUrls array from the config.',\n    recoverySuggestion: 'Please make sure a matching preferredRedirectUrl is provided.',\n});\nexport const INVALID_ORIGIN_EXCEPTION = 'InvalidOriginException';\nexport const invalidOriginException = new AuthError({\n    name: INVALID_ORIGIN_EXCEPTION,\n    message: 'redirect is coming from a different origin. The oauth flow needs to be initiated from the same origin',\n    recoverySuggestion: 'Please call signInWithRedirect from the same origin.',\n});\nexport const OAUTH_SIGNOUT_EXCEPTION = 'OAuthSignOutException';\nexport const TOKEN_REFRESH_EXCEPTION = 'TokenRefreshException';\nexport const UNEXPECTED_SIGN_IN_INTERRUPTION_EXCEPTION = 'UnexpectedSignInInterruptionException';\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAEY,MAAC,8BAA8B,GAAG;AAClC,MAAC,oCAAoC,GAAG;AACxC,MAAC,mCAAmC,GAAG;AACvC,MAAC,sBAAsB,GAAG;AAC1B,MAAC,0BAA0B,GAAG;AAC9B,MAAC,4BAA4B,GAAG;AAChC,MAAC,oCAAoC,GAAG;AACxC,MAAC,wBAAwB,GAAG,IAAI,qOAAS,CAAC;IAClD,IAAI,EAAE,0BAA0B;IAChC,OAAO,EAAE,2EAA2E;IACpF,kBAAkB,EAAE,yEAAyE;AACjG,CAAC;AACW,MAAC,yBAAyB,GAAG,IAAI,qOAAS,CAAC;IACnD,IAAI,EAAE,4BAA4B;IAClC,OAAO,EAAE,0DAA0D;IACnE,kBAAkB,EAAE,sEAAsE;AAC9F,CAAC;AACW,MAAC,oCAAoC,GAAG,IAAI,qOAAS,CAAC;IAC9D,IAAI,EAAE,oCAAoC;IAC1C,OAAO,EAAE,2GAA2G;IACpH,kBAAkB,EAAE,+DAA+D;AACvF,CAAC;AACW,MAAC,wBAAwB,GAAG;AAC5B,MAAC,sBAAsB,GAAG,IAAI,qOAAS,CAAC;IAChD,IAAI,EAAE,wBAAwB;IAC9B,OAAO,EAAE,uGAAuG;IAChH,kBAAkB,EAAE,sDAAsD;AAC9E,CAAC;AACW,MAAC,uBAAuB,GAAG;AAC3B,MAAC,uBAAuB,GAAG;AAC3B,MAAC,yCAAyC,GAAG","debugId":null}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/types.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/utils/types.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { AuthError } from '../../../errors/AuthError';\nimport { DEVICE_METADATA_NOT_FOUND_EXCEPTION, TOKEN_REFRESH_EXCEPTION, USER_UNAUTHENTICATED_EXCEPTION, } from '../../../errors/constants';\nexport function isTypeUserPoolConfig(authConfig) {\n    if (authConfig &&\n        authConfig.Cognito.userPoolId &&\n        authConfig.Cognito.userPoolClientId) {\n        return true;\n    }\n    return false;\n}\nexport function assertAuthTokens(tokens) {\n    if (!tokens || !tokens.accessToken) {\n        throw new AuthError({\n            name: USER_UNAUTHENTICATED_EXCEPTION,\n            message: 'User needs to be authenticated to call this API.',\n            recoverySuggestion: 'Sign in before calling this API again.',\n        });\n    }\n}\nexport function assertIdTokenInAuthTokens(tokens) {\n    if (!tokens || !tokens.idToken) {\n        throw new AuthError({\n            name: USER_UNAUTHENTICATED_EXCEPTION,\n            message: 'User needs to be authenticated to call this API.',\n            recoverySuggestion: 'Sign in before calling this API again.',\n        });\n    }\n}\nexport const oAuthTokenRefreshException = new AuthError({\n    name: TOKEN_REFRESH_EXCEPTION,\n    message: `Token refresh is not supported when authenticated with the 'implicit grant' (token) oauth flow. \n\tPlease change your oauth configuration to use 'code grant' flow.`,\n    recoverySuggestion: `Please logout and change your Amplify configuration to use \"code grant\" flow. \n\tE.g { responseType: 'code' }`,\n});\nexport const tokenRefreshException = new AuthError({\n    name: USER_UNAUTHENTICATED_EXCEPTION,\n    message: 'User needs to be authenticated to call this API.',\n    recoverySuggestion: 'Sign in before calling this API again.',\n});\nexport function assertAuthTokensWithRefreshToken(tokens) {\n    if (isAuthenticatedWithImplicitOauthFlow(tokens)) {\n        throw oAuthTokenRefreshException;\n    }\n    if (!isAuthenticatedWithRefreshToken(tokens)) {\n        throw tokenRefreshException;\n    }\n}\nexport function assertDeviceMetadata(deviceMetadata) {\n    if (!deviceMetadata ||\n        !deviceMetadata.deviceKey ||\n        !deviceMetadata.deviceGroupKey ||\n        !deviceMetadata.randomPassword) {\n        throw new AuthError({\n            name: DEVICE_METADATA_NOT_FOUND_EXCEPTION,\n            message: 'Either deviceKey, deviceGroupKey or secretPassword were not found during the sign-in process.',\n            recoverySuggestion: 'Make sure to not clear storage after calling the signIn API.',\n        });\n    }\n}\nexport const OAuthStorageKeys = {\n    inflightOAuth: 'inflightOAuth',\n    oauthSignIn: 'oauthSignIn',\n    oauthPKCE: 'oauthPKCE',\n    oauthState: 'oauthState',\n};\nfunction isAuthenticated(tokens) {\n    return tokens?.accessToken || tokens?.idToken;\n}\nfunction isAuthenticatedWithRefreshToken(tokens) {\n    return isAuthenticated(tokens) && tokens?.refreshToken;\n}\nfunction isAuthenticatedWithImplicitOauthFlow(tokens) {\n    return isAuthenticated(tokens) && !tokens?.refreshToken;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAGO,SAAS,oBAAoB,CAAC,UAAU,EAAE;IAC7C,IAAI,UAAU,IACV,UAAU,CAAC,OAAO,CAAC,UAAU,IAC7B,UAAU,CAAC,OAAO,CAAC,gBAAgB,EAAE;QACrC,OAAO,IAAI;IACf;IACA,OAAO,KAAK;AAChB;AACO,SAAS,gBAAgB,CAAC,MAAM,EAAE;IACrC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,WAAW,EAAE;QAChC,MAAM,IAAI,qOAAS,CAAC;YAChB,IAAI,EAAE,0PAA8B;YACpC,OAAO,EAAE,kDAAkD;YAC3D,kBAAkB,EAAE,wCAAwC;QACxE,CAAS,CAAC;IACN;AACJ;AACO,SAAS,yBAAyB,CAAC,MAAM,EAAE;IAC9C,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE;QAC5B,MAAM,IAAI,qOAAS,CAAC;YAChB,IAAI,EAAE,0PAA8B;YACpC,OAAO,EAAE,kDAAkD;YAC3D,kBAAkB,EAAE,wCAAwC;QACxE,CAAS,CAAC;IACN;AACJ;AACY,MAAC,0BAA0B,GAAG,IAAI,qOAAS,CAAC;IACpD,IAAI,EAAE,mPAAuB;IAC7B,OAAO,EAAE,AAAC;IAEV,kBAAkB,EAAE,AAAC;AAEzB,CAAC;AACW,MAAC,qBAAqB,GAAG,IAAI,qOAAS,CAAC;IAC/C,IAAI,EAAE,0PAA8B;IACpC,OAAO,EAAE,kDAAkD;IAC3D,kBAAkB,EAAE,wCAAwC;AAChE,CAAC;AACM,SAAS,gCAAgC,CAAC,MAAM,EAAE;IACrD,IAAI,oCAAoC,CAAC,MAAM,CAAC,EAAE;QAC9C,MAAM,0BAA0B;IACpC;IACA,IAAI,CAAC,+BAA+B,CAAC,MAAM,CAAC,EAAE;QAC1C,MAAM,qBAAqB;IAC/B;AACJ;AACO,SAAS,oBAAoB,CAAC,cAAc,EAAE;IACjD,IAAI,CAAC,cAAc,IACf,CAAC,cAAc,CAAC,SAAS,IACzB,CAAC,cAAc,CAAC,cAAc,IAC9B,CAAC,cAAc,CAAC,cAAc,EAAE;QAChC,MAAM,IAAI,qOAAS,CAAC;YAChB,IAAI,EAAE,+PAAmC;YACzC,OAAO,EAAE,+FAA+F;YACxG,kBAAkB,EAAE,8DAA8D;QAC9F,CAAS,CAAC;IACN;AACJ;AACY,MAAC,gBAAgB,GAAG;IAC5B,aAAa,EAAE,eAAe;IAC9B,WAAW,EAAE,aAAa;IAC1B,SAAS,EAAE,WAAW;IACtB,UAAU,EAAE,YAAY;AAC5B;AACA,SAAS,eAAe,CAAC,MAAM,EAAE;IAC7B,wDAAO,MAAM,CAAE,WAAW,sDAAI,MAAM,CAAE,OAAO;AACjD;AACA,SAAS,+BAA+B,CAAC,MAAM,EAAE;IAC7C,OAAO,eAAe,CAAC,MAAM,CAAC,qDAAI,MAAM,CAAE,YAAY;AAC1D;AACA,SAAS,oCAAoC,CAAC,MAAM,EAAE;IAClD,OAAO,eAAe,CAAC,MAAM,CAAC,IAAI,kDAAC,MAAM,CAAE,YAAY;AAC3D","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/factories/createCognitoIdentityPoolEndpointResolver.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/factories/createCognitoIdentityPoolEndpointResolver.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { cognitoIdentityPoolEndpointResolver } from '@aws-amplify/core';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nexport const createCognitoIdentityPoolEndpointResolver = ({ endpointOverride }) => (input) => {\n    if (endpointOverride) {\n        return { url: new AmplifyUrl(endpointOverride) };\n    }\n    return cognitoIdentityPoolEndpointResolver(input);\n};\n"],"names":[],"mappings":";;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAGY,MAAC,yCAAyC,GAAG;QAAC,EAAE,gBAAgB,EAAE;WAAK,CAAC,KAAK,KAAK;QAC1F,IAAI,gBAAgB,EAAE;YAClB,OAAO;gBAAE,GAAG,EAAE,IAAI,+OAAU,CAAC,gBAAgB,CAAC;YAAA,CAAE;QACpD;QACA,WAAO,+UAAmC,EAAC,KAAK,CAAC;IACrD","debugId":null}},
    {"offset": {"line": 282, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/utils.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/credentialsProvider/utils.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { decodeJWT } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError';\nexport function formLoginsMap(idToken) {\n    const issuer = decodeJWT(idToken).payload.iss;\n    const res = {};\n    if (!issuer) {\n        throw new AuthError({\n            name: 'InvalidIdTokenException',\n            message: 'Invalid Idtoken.',\n        });\n    }\n    const domainName = issuer.replace(/(^\\w+:|^)\\/\\//, '');\n    res[domainName] = idToken;\n    return res;\n}\n"],"names":[],"mappings":";;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAGO,SAAS,aAAa,CAAC,OAAO,EAAE;IACnC,MAAM,MAAM,OAAG,qPAAS,EAAC,OAAO,CAAC,CAAC,OAAO,CAAC,GAAG;IAC7C,MAAM,GAAG,GAAG,CAAA,CAAE;IACd,IAAI,CAAC,MAAM,EAAE;QACT,MAAM,IAAI,qOAAS,CAAC;YAChB,IAAI,EAAE,yBAAyB;YAC/B,OAAO,EAAE,kBAAkB;QACvC,CAAS,CAAC;IACN;IACA,MAAM,UAAU,GAAG,MAAM,CAAC,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;IACtD,GAAG,CAAC,UAAU,CAAC,GAAG,OAAO;IACzB,OAAO,GAAG;AACd","debugId":null}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/IdentityIdProvider.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/credentialsProvider/IdentityIdProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createGetIdClient } from '@aws-amplify/core';\nimport { AuthError } from '../../../errors/AuthError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getRegionFromIdentityPoolId } from '../../../foundation/parsers';\nimport { createCognitoIdentityPoolEndpointResolver } from '../factories';\nimport { formLoginsMap } from './utils';\n/**\n * Provides a Cognito identityId\n *\n * @param tokens - The AuthTokens received after SignIn\n * @returns string\n * @throws configuration exceptions: `InvalidIdentityPoolIdException`\n *  - Auth errors that may arise from misconfiguration.\n * @throws service exceptions: {@link GetIdException }\n */\nexport async function cognitoIdentityIdProvider({ tokens, authConfig, identityIdStore, }) {\n    identityIdStore.setAuthConfig({ Cognito: authConfig });\n    // will return null only if there is no identityId cached or if there is an error retrieving it\n    const identityId = await identityIdStore.loadIdentityId();\n    if (identityId) {\n        return identityId.id;\n    }\n    const logins = tokens?.idToken\n        ? formLoginsMap(tokens.idToken.toString())\n        : {};\n    const generatedIdentityId = await generateIdentityId(logins, authConfig);\n    // Store generated identityId\n    identityIdStore.storeIdentityId({\n        id: generatedIdentityId,\n        type: tokens ? 'primary' : 'guest',\n    });\n    return generatedIdentityId;\n}\nasync function generateIdentityId(logins, authConfig) {\n    const identityPoolId = authConfig?.identityPoolId;\n    const region = getRegionFromIdentityPoolId(identityPoolId);\n    const getId = createGetIdClient({\n        endpointResolver: createCognitoIdentityPoolEndpointResolver({\n            endpointOverride: authConfig.identityPoolEndpoint,\n        }),\n    });\n    // IdentityId is absent so get it using IdentityPoolId with Cognito's GetId API\n    let idResult;\n    // for a first-time user, this will return a brand new identity\n    // for a returning user, this will retrieve the previous identity assocaited with the logins\n    try {\n        idResult = (await getId({\n            region,\n        }, {\n            IdentityPoolId: identityPoolId,\n            Logins: logins,\n        })).IdentityId;\n    }\n    catch (e) {\n        assertServiceError(e);\n        throw new AuthError(e);\n    }\n    if (!idResult) {\n        throw new AuthError({\n            name: 'GetIdResponseException',\n            message: 'Received undefined response from getId operation',\n            recoverySuggestion: 'Make sure to pass a valid identityPoolId in the configuration.',\n        });\n    }\n    return idResult;\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAOA;;;;;;;;CAQA,GACO,eAAe,yBAAyB;UAAG,MAAM,EAAE,UAAU,EAAE,eAAe,EAAG,EAAE,CAA1C;IAC5C,eAAe,CAAC,aAAa,CAAC;QAAE,OAAO,EAAE,UAAU;IAAA,CAAE,CAAC;IAC1D,+FAAA;IACI,MAAM,UAAU,GAAG,MAAM,eAAe,CAAC,cAAc,EAAE;IACzD,IAAI,UAAU,EAAE;QACZ,OAAO,UAAU,CAAC,EAAE;IACxB;IACA,MAAM,MAAM,IAAG,MAAM,iDAAE,OAAA,QACjB,0QAAa,EAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,IACvC,CAAA,CAAE;IACR,MAAM,mBAAmB,GAAG,MAAM,kBAAkB,CAAC,MAAM,EAAE,UAAU,CAAC;IAC5E,6BAAA;IACI,eAAe,CAAC,eAAe,CAAC;QAC5B,EAAE,EAAE,mBAAmB;QACvB,IAAI,EAAE,MAAM,GAAG,SAAS,GAAG,OAAO;IAC1C,CAAK,CAAC;IACF,OAAO,mBAAmB;AAC9B;AACA,eAAe,kBAAkB,CAAC,MAAM,EAAE,UAAU,EAAE;IAClD,MAAM,cAAc,2DAAG,UAAU,CAAE,cAAc;IACjD,MAAM,MAAM,OAAG,0QAA2B,EAAC,cAAc,CAAC;IAC1D,MAAM,KAAK,OAAG,2SAAiB,EAAC;QAC5B,gBAAgB,MAAE,gUAAyC,EAAC;YACxD,gBAAgB,EAAE,UAAU,CAAC,oBAAoB;QAC7D,CAAS,CAAC;IACV,CAAK,CAAC;IACN,+EAAA;IACI,IAAI,QAAQ;IAChB,+DAAA;IACA,4FAAA;IACI,IAAI;QACA,QAAQ,GAAG,CAAC,MAAM,KAAK,CAAC;YACpB,MAAM;QAClB,CAAS,EAAE;YACC,cAAc,EAAE,cAAc;YAC9B,MAAM,EAAE,MAAM;QAC1B,CAAS,CAAC,EAAE,UAAU;IAClB,EACA,OAAO,CAAC,EAAE;YACN,gQAAkB,EAAC,CAAC,CAAC;QACrB,MAAM,IAAI,qOAAS,CAAC,CAAC,CAAC;IAC1B;IACA,IAAI,CAAC,QAAQ,EAAE;QACX,MAAM,IAAI,qOAAS,CAAC;YAChB,IAAI,EAAE,wBAAwB;YAC9B,OAAO,EAAE,kDAAkD;YAC3D,kBAAkB,EAAE,gEAAgE;QAChG,CAAS,CAAC;IACN;IACA,OAAO,QAAQ;AACnB","debugId":null}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/credentialsProvider.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/credentialsProvider/credentialsProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger, createGetCredentialsForIdentityClient, } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig, } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { getRegionFromIdentityPoolId } from '../../../foundation/parsers';\nimport { assertIdTokenInAuthTokens } from '../utils/types';\nimport { createCognitoIdentityPoolEndpointResolver } from '../factories';\nimport { cognitoIdentityIdProvider } from './IdentityIdProvider';\nimport { formLoginsMap } from './utils';\nconst logger = new ConsoleLogger('CognitoCredentialsProvider');\nconst CREDENTIALS_TTL = 50 * 60 * 1000; // 50 min, can be modified on config if required in the future\nexport class CognitoAWSCredentialsAndIdentityIdProvider {\n    constructor(identityIdStore) {\n        this._nextCredentialsRefresh = 0;\n        this._identityIdStore = identityIdStore;\n    }\n    async clearCredentialsAndIdentityId() {\n        logger.debug('Clearing out credentials and identityId');\n        this._credentialsAndIdentityId = undefined;\n        await this._identityIdStore.clearIdentityId();\n    }\n    async clearCredentials() {\n        logger.debug('Clearing out in-memory credentials');\n        this._credentialsAndIdentityId = undefined;\n    }\n    async getCredentialsAndIdentityId(getCredentialsOptions) {\n        const isAuthenticated = getCredentialsOptions.authenticated;\n        const { tokens } = getCredentialsOptions;\n        const { authConfig } = getCredentialsOptions;\n        try {\n            assertIdentityPoolIdConfig(authConfig?.Cognito);\n        }\n        catch {\n            // No identity pool configured, skipping\n            return;\n        }\n        if (!isAuthenticated && !authConfig.Cognito.allowGuestAccess) {\n            // TODO(V6): return partial result like Native platforms\n            return;\n        }\n        const { forceRefresh } = getCredentialsOptions;\n        const tokenHasChanged = this.hasTokenChanged(tokens);\n        const identityId = await cognitoIdentityIdProvider({\n            tokens,\n            authConfig: authConfig.Cognito,\n            identityIdStore: this._identityIdStore,\n        });\n        // Clear cached credentials when forceRefresh is true OR the cache token has changed\n        if (forceRefresh || tokenHasChanged) {\n            this.clearCredentials();\n        }\n        if (!isAuthenticated) {\n            return this.getGuestCredentials(identityId, authConfig.Cognito);\n        }\n        else {\n            assertIdTokenInAuthTokens(tokens);\n            return this.credsForOIDCTokens(authConfig.Cognito, tokens, identityId);\n        }\n    }\n    async getGuestCredentials(identityId, authConfig) {\n        // Return existing in-memory cached credentials only if it exists, is not past it's lifetime and is unauthenticated credentials\n        if (this._credentialsAndIdentityId &&\n            !this.isPastTTL() &&\n            this._credentialsAndIdentityId.isAuthenticatedCreds === false) {\n            logger.info('returning stored credentials as they neither past TTL nor expired.');\n            return this._credentialsAndIdentityId;\n        }\n        // Clear to discard if any authenticated credentials are set and start with a clean slate\n        this.clearCredentials();\n        const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);\n        const getCredentialsForIdentity = createGetCredentialsForIdentityClient({\n            endpointResolver: createCognitoIdentityPoolEndpointResolver({\n                endpointOverride: authConfig.identityPoolEndpoint,\n            }),\n        });\n        // use identityId to obtain guest credentials\n        // save credentials in-memory\n        // No logins params should be passed for guest creds:\n        // https://docs.aws.amazon.com/cognitoidentity/latest/APIReference/API_GetCredentialsForIdentity.html\n        let clientResult;\n        try {\n            clientResult = await getCredentialsForIdentity({ region }, {\n                IdentityId: identityId,\n            });\n        }\n        catch (e) {\n            assertServiceError(e);\n            throw new AuthError(e);\n        }\n        if (clientResult?.Credentials?.AccessKeyId &&\n            clientResult?.Credentials?.SecretKey) {\n            this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n            const res = {\n                credentials: {\n                    accessKeyId: clientResult.Credentials.AccessKeyId,\n                    secretAccessKey: clientResult.Credentials.SecretKey,\n                    sessionToken: clientResult.Credentials.SessionToken,\n                    expiration: clientResult.Credentials.Expiration,\n                },\n                identityId,\n            };\n            if (clientResult.IdentityId) {\n                res.identityId = clientResult.IdentityId;\n                this._identityIdStore.storeIdentityId({\n                    id: clientResult.IdentityId,\n                    type: 'guest',\n                });\n            }\n            this._credentialsAndIdentityId = {\n                ...res,\n                isAuthenticatedCreds: false,\n            };\n            return res;\n        }\n        else {\n            throw new AuthError({\n                name: 'CredentialsNotFoundException',\n                message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`,\n            });\n        }\n    }\n    async credsForOIDCTokens(authConfig, authTokens, identityId) {\n        if (this._credentialsAndIdentityId &&\n            !this.isPastTTL() &&\n            this._credentialsAndIdentityId.isAuthenticatedCreds === true) {\n            logger.debug('returning stored credentials as they neither past TTL nor expired.');\n            return this._credentialsAndIdentityId;\n        }\n        // Clear to discard if any unauthenticated credentials are set and start with a clean slate\n        this.clearCredentials();\n        const logins = authTokens.idToken\n            ? formLoginsMap(authTokens.idToken.toString())\n            : {};\n        const region = getRegionFromIdentityPoolId(authConfig.identityPoolId);\n        const getCredentialsForIdentity = createGetCredentialsForIdentityClient({\n            endpointResolver: createCognitoIdentityPoolEndpointResolver({\n                endpointOverride: authConfig.identityPoolEndpoint,\n            }),\n        });\n        let clientResult;\n        try {\n            clientResult = await getCredentialsForIdentity({ region }, {\n                IdentityId: identityId,\n                Logins: logins,\n            });\n        }\n        catch (e) {\n            assertServiceError(e);\n            throw new AuthError(e);\n        }\n        if (clientResult?.Credentials?.AccessKeyId &&\n            clientResult?.Credentials?.SecretKey) {\n            this._nextCredentialsRefresh = new Date().getTime() + CREDENTIALS_TTL;\n            const res = {\n                credentials: {\n                    accessKeyId: clientResult.Credentials.AccessKeyId,\n                    secretAccessKey: clientResult.Credentials.SecretKey,\n                    sessionToken: clientResult.Credentials.SessionToken,\n                    expiration: clientResult.Credentials.Expiration,\n                },\n                identityId,\n            };\n            if (clientResult.IdentityId) {\n                res.identityId = clientResult.IdentityId;\n                // note: the following call removes guest identityId from the persistent store (localStorage)\n                this._identityIdStore.storeIdentityId({\n                    id: clientResult.IdentityId,\n                    type: 'primary',\n                });\n            }\n            // Store the credentials in-memory along with the expiration\n            this._credentialsAndIdentityId = {\n                ...res,\n                isAuthenticatedCreds: true,\n                associatedIdToken: authTokens.idToken?.toString(),\n            };\n            return res;\n        }\n        else {\n            throw new AuthError({\n                name: 'CredentialsException',\n                message: `Cognito did not respond with either Credentials, AccessKeyId or SecretKey.`,\n            });\n        }\n    }\n    isPastTTL() {\n        return this._nextCredentialsRefresh === undefined\n            ? true\n            : this._nextCredentialsRefresh <= Date.now();\n    }\n    hasTokenChanged(tokens) {\n        return (!!tokens &&\n            !!this._credentialsAndIdentityId?.associatedIdToken &&\n            tokens.idToken?.toString() !==\n                this._credentialsAndIdentityId.associatedIdToken);\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 605, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/types.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/tokenProvider/types.ts"],"sourcesContent":["export const AuthTokenStorageKeys = {\n    accessToken: 'accessToken',\n    idToken: 'idToken',\n    oidcProvider: 'oidcProvider',\n    clockDrift: 'clockDrift',\n    refreshToken: 'refreshToken',\n    deviceKey: 'deviceKey',\n    randomPasswordKey: 'randomPasswordKey',\n    deviceGroupKey: 'deviceGroupKey',\n    signInDetails: 'signInDetails',\n    oauthMetadata: 'oauthMetadata',\n};\n"],"names":[],"mappings":";;;;AAAY,MAAC,oBAAoB,GAAG;IAChC,WAAW,EAAE,aAAa;IAC1B,OAAO,EAAE,SAAS;IAClB,YAAY,EAAE,cAAc;IAC5B,UAAU,EAAE,YAAY;IACxB,YAAY,EAAE,cAAc;IAC5B,SAAS,EAAE,WAAW;IACtB,iBAAiB,EAAE,mBAAmB;IACtC,cAAc,EAAE,gBAAgB;IAChC,aAAa,EAAE,eAAe;IAC9B,aAAa,EAAE,eAAe;AAClC","debugId":null}},
    {"offset": {"line": 627, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/errorHelpers.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/tokenProvider/errorHelpers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { createAssertionFunction, } from '@aws-amplify/core/internals/utils';\nexport var TokenProviderErrorCode;\n(function (TokenProviderErrorCode) {\n    TokenProviderErrorCode[\"InvalidAuthTokens\"] = \"InvalidAuthTokens\";\n})(TokenProviderErrorCode || (TokenProviderErrorCode = {}));\nconst tokenValidationErrorMap = {\n    [TokenProviderErrorCode.InvalidAuthTokens]: {\n        message: 'Invalid tokens.',\n        recoverySuggestion: 'Make sure the tokens are valid.',\n    },\n};\nexport const assert = createAssertionFunction(tokenValidationErrorMap);\n"],"names":[],"mappings":";;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAEU,IAAC;AACX,CAAC,SAAU,sBAAsB,EAAE;IAC/B,sBAAsB,CAAC,mBAAmB,CAAC,GAAG,mBAAmB;AACrE,CAAC,EAAE,sBAAsB,IAAA,CAAK,sBAAsB,GAAG,CAAA,CAAE,CAAC,CAAC;AAC3D,MAAM,uBAAuB,GAAG;IAC5B,CAAC,sBAAsB,CAAC,iBAAiB,CAAA,EAAG;QACxC,OAAO,EAAE,iBAAiB;QAC1B,kBAAkB,EAAE,iCAAiC;IAC7D,CAAK;AACL,CAAC;AACW,MAAC,MAAM,OAAG,iQAAuB,EAAC,uBAAuB","debugId":null}},
    {"offset": {"line": 654, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/constants.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/tokenProvider/constants.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const AUTH_KEY_PREFIX = 'CognitoIdentityServiceProvider';\n"],"names":[],"mappings":"AAAA,qEAAA;AACA,sCAAA;;;;;AACY,MAAC,eAAe,GAAG","debugId":null}},
    {"offset": {"line": 667, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/TokenStore.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/tokenProvider/TokenStore.ts"],"sourcesContent":["import { assertTokenProviderConfig, decodeJWT, } from '@aws-amplify/core/internals/utils';\nimport { AuthError } from '../../../errors/AuthError';\nimport { AuthTokenStorageKeys, } from './types';\nimport { TokenProviderErrorCode, assert } from './errorHelpers';\nimport { AUTH_KEY_PREFIX } from './constants';\nexport class DefaultTokenStore {\n    getKeyValueStorage() {\n        if (!this.keyValueStorage) {\n            throw new AuthError({\n                name: 'KeyValueStorageNotFoundException',\n                message: 'KeyValueStorage was not found in TokenStore',\n            });\n        }\n        return this.keyValueStorage;\n    }\n    setKeyValueStorage(keyValueStorage) {\n        this.keyValueStorage = keyValueStorage;\n    }\n    setAuthConfig(authConfig) {\n        this.authConfig = authConfig;\n    }\n    async loadTokens() {\n        // TODO(v6): migration logic should be here\n        // Reading V5 tokens old format\n        try {\n            const authKeys = await this.getAuthKeys();\n            const accessTokenString = await this.getKeyValueStorage().getItem(authKeys.accessToken);\n            if (!accessTokenString) {\n                throw new AuthError({\n                    name: 'NoSessionFoundException',\n                    message: 'Auth session was not found. Make sure to call signIn.',\n                });\n            }\n            const accessToken = decodeJWT(accessTokenString);\n            const itString = await this.getKeyValueStorage().getItem(authKeys.idToken);\n            const idToken = itString ? decodeJWT(itString) : undefined;\n            const refreshToken = (await this.getKeyValueStorage().getItem(authKeys.refreshToken)) ??\n                undefined;\n            const clockDriftString = (await this.getKeyValueStorage().getItem(authKeys.clockDrift)) ?? '0';\n            const clockDrift = Number.parseInt(clockDriftString);\n            const signInDetails = await this.getKeyValueStorage().getItem(authKeys.signInDetails);\n            const tokens = {\n                accessToken,\n                idToken,\n                refreshToken,\n                deviceMetadata: (await this.getDeviceMetadata()) ?? undefined,\n                clockDrift,\n                username: await this.getLastAuthUser(),\n            };\n            if (signInDetails) {\n                tokens.signInDetails = JSON.parse(signInDetails);\n            }\n            return tokens;\n        }\n        catch (err) {\n            return null;\n        }\n    }\n    async storeTokens(tokens) {\n        assert(tokens !== undefined, TokenProviderErrorCode.InvalidAuthTokens);\n        const lastAuthUser = tokens.username;\n        await this.getKeyValueStorage().setItem(this.getLastAuthUserKey(), lastAuthUser);\n        const authKeys = await this.getAuthKeys();\n        await this.getKeyValueStorage().setItem(authKeys.accessToken, tokens.accessToken.toString());\n        if (tokens.idToken) {\n            await this.getKeyValueStorage().setItem(authKeys.idToken, tokens.idToken.toString());\n        }\n        else {\n            await this.getKeyValueStorage().removeItem(authKeys.idToken);\n        }\n        if (tokens.refreshToken) {\n            await this.getKeyValueStorage().setItem(authKeys.refreshToken, tokens.refreshToken);\n        }\n        else {\n            await this.getKeyValueStorage().removeItem(authKeys.refreshToken);\n        }\n        if (tokens.deviceMetadata) {\n            if (tokens.deviceMetadata.deviceKey) {\n                await this.getKeyValueStorage().setItem(authKeys.deviceKey, tokens.deviceMetadata.deviceKey);\n            }\n            if (tokens.deviceMetadata.deviceGroupKey) {\n                await this.getKeyValueStorage().setItem(authKeys.deviceGroupKey, tokens.deviceMetadata.deviceGroupKey);\n            }\n            await this.getKeyValueStorage().setItem(authKeys.randomPasswordKey, tokens.deviceMetadata.randomPassword);\n        }\n        if (tokens.signInDetails) {\n            await this.getKeyValueStorage().setItem(authKeys.signInDetails, JSON.stringify(tokens.signInDetails));\n        }\n        else {\n            await this.getKeyValueStorage().removeItem(authKeys.signInDetails);\n        }\n        await this.getKeyValueStorage().setItem(authKeys.clockDrift, `${tokens.clockDrift}`);\n    }\n    async clearTokens() {\n        const authKeys = await this.getAuthKeys();\n        // Not calling clear because it can remove data that is not managed by AuthTokenStore\n        await Promise.all([\n            this.getKeyValueStorage().removeItem(authKeys.accessToken),\n            this.getKeyValueStorage().removeItem(authKeys.idToken),\n            this.getKeyValueStorage().removeItem(authKeys.clockDrift),\n            this.getKeyValueStorage().removeItem(authKeys.refreshToken),\n            this.getKeyValueStorage().removeItem(authKeys.signInDetails),\n            this.getKeyValueStorage().removeItem(this.getLastAuthUserKey()),\n            this.getKeyValueStorage().removeItem(authKeys.oauthMetadata),\n        ]);\n    }\n    async getDeviceMetadata(username) {\n        const authKeys = await this.getAuthKeys(username);\n        const deviceKey = await this.getKeyValueStorage().getItem(authKeys.deviceKey);\n        const deviceGroupKey = await this.getKeyValueStorage().getItem(authKeys.deviceGroupKey);\n        const randomPassword = await this.getKeyValueStorage().getItem(authKeys.randomPasswordKey);\n        return randomPassword && deviceGroupKey && deviceKey\n            ? {\n                deviceKey,\n                deviceGroupKey,\n                randomPassword,\n            }\n            : null;\n    }\n    async clearDeviceMetadata(username) {\n        const authKeys = await this.getAuthKeys(username);\n        await Promise.all([\n            this.getKeyValueStorage().removeItem(authKeys.deviceKey),\n            this.getKeyValueStorage().removeItem(authKeys.deviceGroupKey),\n            this.getKeyValueStorage().removeItem(authKeys.randomPasswordKey),\n        ]);\n    }\n    async getAuthKeys(username) {\n        assertTokenProviderConfig(this.authConfig?.Cognito);\n        const lastAuthUser = username ?? (await this.getLastAuthUser());\n        return createKeysForAuthStorage(AUTH_KEY_PREFIX, `${this.authConfig.Cognito.userPoolClientId}.${lastAuthUser}`);\n    }\n    getLastAuthUserKey() {\n        assertTokenProviderConfig(this.authConfig?.Cognito);\n        const identifier = this.authConfig.Cognito.userPoolClientId;\n        return `${AUTH_KEY_PREFIX}.${identifier}.LastAuthUser`;\n    }\n    async getLastAuthUser() {\n        const lastAuthUser = (await this.getKeyValueStorage().getItem(this.getLastAuthUserKey())) ??\n            'username';\n        return lastAuthUser;\n    }\n    async setOAuthMetadata(metadata) {\n        const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();\n        await this.getKeyValueStorage().setItem(oauthMetadataKey, JSON.stringify(metadata));\n    }\n    async getOAuthMetadata() {\n        const { oauthMetadata: oauthMetadataKey } = await this.getAuthKeys();\n        const oauthMetadata = await this.getKeyValueStorage().getItem(oauthMetadataKey);\n        return oauthMetadata && JSON.parse(oauthMetadata);\n    }\n}\nexport const createKeysForAuthStorage = (provider, identifier) => {\n    return getAuthStorageKeys(AuthTokenStorageKeys)(`${provider}`, identifier);\n};\nexport function getAuthStorageKeys(authKeys) {\n    const keys = Object.values({ ...authKeys });\n    return (prefix, identifier) => keys.reduce((acc, authKey) => ({\n        ...acc,\n        [authKey]: `${prefix}.${identifier}.${authKey}`,\n    }), {});\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 848, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/types.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/credentialsProvider/types.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const IdentityIdStorageKeys = {\n    identityId: 'identityId',\n};\n"],"names":[],"mappings":"AAAA,qEAAA;AACA,sCAAA;;;;;AACY,MAAC,qBAAqB,GAAG;IACjC,UAAU,EAAE,YAAY;AAC5B","debugId":null}},
    {"offset": {"line": 863, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/IdentityIdStore.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/credentialsProvider/IdentityIdStore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { ConsoleLogger, } from '@aws-amplify/core';\nimport { assertIdentityPoolIdConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore';\nimport { IdentityIdStorageKeys } from './types';\nconst logger = new ConsoleLogger('DefaultIdentityIdStore');\nexport class DefaultIdentityIdStore {\n    setAuthConfig(authConfigParam) {\n        assertIdentityPoolIdConfig(authConfigParam.Cognito);\n        this.authConfig = authConfigParam;\n        this._authKeys = createKeysForAuthStorage('Cognito', authConfigParam.Cognito.identityPoolId);\n    }\n    constructor(keyValueStorage) {\n        this._authKeys = {};\n        this._hasGuestIdentityId = false;\n        this.keyValueStorage = keyValueStorage;\n    }\n    async loadIdentityId() {\n        assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n        try {\n            if (this._primaryIdentityId) {\n                return {\n                    id: this._primaryIdentityId,\n                    type: 'primary',\n                };\n            }\n            else {\n                const storedIdentityId = await this.keyValueStorage.getItem(this._authKeys.identityId);\n                if (storedIdentityId) {\n                    this._hasGuestIdentityId = true;\n                    return {\n                        id: storedIdentityId,\n                        type: 'guest',\n                    };\n                }\n                return null;\n            }\n        }\n        catch (err) {\n            logger.log('Error getting stored IdentityId.', err);\n            return null;\n        }\n    }\n    async storeIdentityId(identity) {\n        assertIdentityPoolIdConfig(this.authConfig?.Cognito);\n        if (identity.type === 'guest') {\n            this.keyValueStorage.setItem(this._authKeys.identityId, identity.id);\n            // Clear in-memory storage of primary identityId\n            this._primaryIdentityId = undefined;\n            this._hasGuestIdentityId = true;\n        }\n        else {\n            this._primaryIdentityId = identity.id;\n            // Clear locally stored guest id\n            if (this._hasGuestIdentityId) {\n                this.keyValueStorage.removeItem(this._authKeys.identityId);\n                this._hasGuestIdentityId = false;\n            }\n        }\n    }\n    async clearIdentityId() {\n        this._primaryIdentityId = undefined;\n        await this.keyValueStorage.removeItem(this._authKeys.identityId);\n    }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n    return getAuthStorageKeys(IdentityIdStorageKeys)(`com.amplify.${provider}`, identifier);\n};\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAKA,MAAM,MAAM,GAAG,IAAI,6OAAa,CAAC,wBAAwB,CAAC;AACnD,MAAM,sBAAsB,CAAC;IAChC,aAAa,CAAC,eAAe,EAAE;YAC3B,sQAA0B,EAAC,eAAe,CAAC,OAAO,CAAC;QACnD,IAAI,CAAC,UAAU,GAAG,eAAe;QACjC,IAAI,CAAC,SAAS,GAAG,wBAAwB,CAAC,SAAS,EAAE,eAAe,CAAC,OAAO,CAAC,cAAc,CAAC;IAChG;IAMA,MAAM,cAAc,GAAG;;YACnB,sQAA0B,0BAAK,CAAC,UAAU,qDAAf,iBAAiB,OAAO,CAAC;QACpD,IAAI;YACA,IAAI,IAAI,CAAC,kBAAkB,EAAE;gBACzB,OAAO;oBACH,EAAE,EAAE,IAAI,CAAC,kBAAkB;oBAC3B,IAAI,EAAE,SAAS;gBACnC,CAAiB;YACL,OACK;gBACD,MAAM,gBAAgB,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;gBACtF,IAAI,gBAAgB,EAAE;oBAClB,IAAI,CAAC,mBAAmB,GAAG,IAAI;oBAC/B,OAAO;wBACH,EAAE,EAAE,gBAAgB;wBACpB,IAAI,EAAE,OAAO;oBACrC,CAAqB;gBACL;gBACA,OAAO,IAAI;YACf;QACJ,EACA,OAAO,GAAG,EAAE;YACR,MAAM,CAAC,GAAG,CAAC,kCAAkC,EAAE,GAAG,CAAC;YACnD,OAAO,IAAI;QACf;IACJ;IACA,MAAM,eAAe,CAAC,QAAQ,EAAE;;YAC5B,sQAA0B,0BAAK,CAAC,UAAU,qDAAf,iBAAiB,OAAO,CAAC;QACpD,IAAI,QAAQ,CAAC,IAAI,KAAK,OAAO,EAAE;YAC3B,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,EAAE,CAAC;YAChF,gDAAA;YACY,IAAI,CAAC,kBAAkB,GAAG,SAAS;YACnC,IAAI,CAAC,mBAAmB,GAAG,IAAI;QACnC,OACK;YACD,IAAI,CAAC,kBAAkB,GAAG,QAAQ,CAAC,EAAE;YACjD,gCAAA;YACY,IAAI,IAAI,CAAC,mBAAmB,EAAE;gBAC1B,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;gBAC1D,IAAI,CAAC,mBAAmB,GAAG,KAAK;YACpC;QACJ;IACJ;IACA,MAAM,eAAe,GAAG;QACpB,IAAI,CAAC,kBAAkB,GAAG,SAAS;QACnC,MAAM,IAAI,CAAC,eAAe,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC;IACpE;IAnDA,WAAW,CAAC,eAAe,CAAE;QACzB,IAAI,CAAC,SAAS,GAAG,CAAA,CAAE;QACnB,IAAI,CAAC,mBAAmB,GAAG,KAAK;QAChC,IAAI,CAAC,eAAe,GAAG,eAAe;IAC1C;AAgDJ;AACA,MAAM,wBAAwB,GAAG,CAAC,QAAQ,EAAE,UAAU,KAAK;IACvD,WAAO,8QAAkB,EAAC,kRAAqB,CAAC,CAAC,AAAC,YAAY,GAAW,CAAC,MAAV,QAAQ,GAAI,UAAU,CAAC;AAC3F,CAAC","debugId":null}},
    {"offset": {"line": 945, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/credentialsProvider/index.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/credentialsProvider/index.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { defaultStorage } from '@aws-amplify/core';\nimport { DefaultIdentityIdStore } from './IdentityIdStore';\nimport { CognitoAWSCredentialsAndIdentityIdProvider } from './credentialsProvider';\n/**\n * Cognito specific implmentation of the CredentialsProvider interface\n * that manages setting and getting of AWS Credentials.\n *\n * @throws configuration expections: `InvalidIdentityPoolIdException`\n *  - Auth errors that may arise from misconfiguration.\n * @throws service expections: {@link GetCredentialsForIdentityException}, {@link GetIdException}\n *\n */\nexport const cognitoCredentialsProvider = new CognitoAWSCredentialsAndIdentityIdProvider(new DefaultIdentityIdStore(defaultStorage));\nexport { CognitoAWSCredentialsAndIdentityIdProvider, DefaultIdentityIdStore };\n"],"names":[],"mappings":";;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAIA;;;;;;;;CAQA,GACY,MAAC,0BAA0B,GAAG,IAAI,qTAA0C,CAAC,IAAI,6RAAsB,CAAC,uPAAc,CAAC","debugId":null}},
    {"offset": {"line": 972, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/foundation/constants.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/foundation/constants.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * The service name used to sign requests if the API requires authentication.\n */\nexport const COGNITO_IDP_SERVICE_NAME = 'cognito-idp';\n"],"names":[],"mappings":"AAAA,qEAAA;AACA,sCAAA;AACA;;CAEA;;;;AACY,MAAC,wBAAwB,GAAG","debugId":null}},
    {"offset": {"line": 987, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/foundation/cognitoUserPoolEndpointResolver.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/foundation/cognitoUserPoolEndpointResolver.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getDnsSuffix, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { COGNITO_IDP_SERVICE_NAME } from './constants';\nexport const cognitoUserPoolEndpointResolver = ({ region, }) => ({\n    url: new AmplifyUrl(`https://${COGNITO_IDP_SERVICE_NAME}.${region}.${getDnsSuffix(region)}`),\n});\n"],"names":[],"mappings":";;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAIY,MAAC,+BAA+B,GAAG;QAAC,EAAE,MAAM,EAAG;WAAM;QAC7D,GAAG,EAAE,IAAI,+OAAU,CAAC,AAAC,QAAQ,UAAE,wPAAwB,EAAC,CAAC,WAAE,MAAM,EAAC,CAAC,IAAuB,CAAC,CAAC,SAAvB,yPAAY,EAAC,MAAM,CAAC;IAC7F,CAAC","debugId":null}},
    {"offset": {"line": 1011, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/factories/createCognitoUserPoolEndpointResolver.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/factories/createCognitoUserPoolEndpointResolver.ts"],"sourcesContent":["import { AmplifyUrl } from '@aws-amplify/core/internals/utils';\nimport { cognitoUserPoolEndpointResolver } from '../../../foundation/cognitoUserPoolEndpointResolver';\nexport const createCognitoUserPoolEndpointResolver = ({ endpointOverride }) => (input) => {\n    if (endpointOverride) {\n        return { url: new AmplifyUrl(endpointOverride) };\n    }\n    return cognitoUserPoolEndpointResolver(input);\n};\n"],"names":[],"mappings":";;;;;;;;AAEY,MAAC,qCAAqC,GAAG;QAAC,EAAE,gBAAgB,EAAE;WAAK,CAAC,KAAK,KAAK;QACtF,IAAI,gBAAgB,EAAE;YAClB,OAAO;gBAAE,GAAG,EAAE,IAAI,+OAAU,CAAC,gBAAgB,CAAC;YAAA,CAAE;QACpD;QACA,WAAO,qRAA+B,EAAC,KAAK,CAAC;IACjD","debugId":null}},
    {"offset": {"line": 1036, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolSerializer.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolSerializer.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nexport const createUserPoolSerializer = (operation) => (input, endpoint) => {\n    const headers = getSharedHeaders(operation);\n    const body = JSON.stringify(input);\n    return buildHttpRpcRequest(endpoint, headers, body);\n};\nconst getSharedHeaders = (operation) => ({\n    'content-type': 'application/x-amz-json-1.1',\n    'x-amz-target': `AWSCognitoIdentityProviderService.${operation}`,\n});\nconst buildHttpRpcRequest = ({ url }, headers, body) => ({\n    headers,\n    url,\n    body,\n    method: 'POST',\n});\n"],"names":[],"mappings":"AAAA,qEAAA;AACA,sCAAA;;;;;AACY,MAAC,wBAAwB,GAAG,CAAC,SAAS,GAAK,CAAC,KAAK,EAAE,QAAQ,KAAK;QACxE,MAAM,OAAO,GAAG,gBAAgB,CAAC,SAAS,CAAC;QAC3C,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;QAClC,OAAO,mBAAmB,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,CAAC;IACvD;AACA,MAAM,gBAAgB,GAAG,CAAC,SAAS,GAAA,CAAM;QACrC,cAAc,EAAE,4BAA4B;QAC5C,cAAc,EAAE,AAAC,kCAAkC,GAAY,CAAC,MAAX,SAAS;IAClE,CAAC,CAAC;AACF,MAAM,mBAAmB,GAAG,QAAU,OAAO,EAAE,IAAI;QAAtB,EAAE,GAAG,EAAE;WAAqB;QACrD,OAAO;QACP,GAAG;QACH,IAAI;QACJ,MAAM,EAAE,MAAM;IAClB,CAAC,CAAC","debugId":null}},
    {"offset": {"line": 1066, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolDeserializer.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/shared/serde/createUserPoolDeserializer.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { parseJsonBody, parseJsonError, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { assertServiceError } from '../../../../../../errors/utils/assertServiceError';\nimport { AuthError } from '../../../../../../errors/AuthError';\nexport const createUserPoolDeserializer = () => async (response) => {\n    if (response.statusCode >= 300) {\n        const error = await parseJsonError(response);\n        assertServiceError(error);\n        throw new AuthError({\n            name: error.name,\n            message: error.message,\n            metadata: error.$metadata,\n        });\n    }\n    return parseJsonBody(response);\n};\n"],"names":[],"mappings":";;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAIY,MAAC,0BAA0B,GAAG,IAAM,OAAO,QAAQ,KAAK;QAChE,IAAI,QAAQ,CAAC,UAAU,IAAI,GAAG,EAAE;YAC5B,MAAM,KAAK,GAAG,UAAM,+OAAc,EAAC,QAAQ,CAAC;gBAC5C,gQAAkB,EAAC,KAAK,CAAC;YACzB,MAAM,IAAI,qOAAS,CAAC;gBAChB,IAAI,EAAE,KAAK,CAAC,IAAI;gBAChB,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,QAAQ,EAAE,KAAK,CAAC,SAAS;YACrC,CAAS,CAAC;QACN;QACA,WAAO,8OAAa,EAAC,QAAQ,CAAC;IAClC","debugId":null}},
    {"offset": {"line": 1096, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeTransferHandler } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { unauthenticatedHandler, } from '@aws-amplify/core/internals/aws-client-utils';\n/**\n * A Cognito Identity-specific middleware that disables caching for all requests.\n */\nconst disableCacheMiddlewareFactory = () => (next, _) => async function disableCacheMiddleware(request) {\n    request.headers['cache-control'] = 'no-store';\n    return next(request);\n};\n/**\n * A Cognito Identity-specific transfer handler that does NOT sign requests, and\n * disables caching.\n *\n * @internal\n */\nexport const cognitoUserPoolTransferHandler = composeTransferHandler(unauthenticatedHandler, [disableCacheMiddlewareFactory]);\n"],"names":[],"mappings":";;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAGA;;CAEA,GACA,MAAM,6BAA6B,GAAG,IAAM,CAAC,IAAI,EAAE,CAAC,GAAK,eAAe,sBAAsB,CAAC,OAAO,EAAE;YACpG,OAAO,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU;YAC7C,OAAO,IAAI,CAAC,OAAO,CAAC;QACxB,CAAC;AACD;;;;;CAKA,GACY,MAAC,8BAA8B,OAAG,4QAAsB,EAAC,4QAAsB,EAAE;IAAC,6BAA6B;CAAC","debugId":null}},
    {"offset": {"line": 1126, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/constants.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { getRetryDecider, jitteredBackoff, parseJsonError, } from '@aws-amplify/core/internals/aws-client-utils';\nimport { getAmplifyUserAgent } from '@aws-amplify/core/internals/utils';\nimport { COGNITO_IDP_SERVICE_NAME } from '../../../constants';\nexport const DEFAULT_SERVICE_CLIENT_API_CONFIG = {\n    service: COGNITO_IDP_SERVICE_NAME,\n    retryDecider: getRetryDecider(parseJsonError),\n    computeDelay: jitteredBackoff,\n    get userAgentValue() {\n        return getAmplifyUserAgent();\n    },\n    cache: 'no-store',\n};\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAIY,MAAC,iCAAiC,GAAG;IAC7C,OAAO,EAAE,wPAAwB;IACjC,YAAY,MAAE,6QAAe,EAAC,+OAAc,CAAC;IAC7C,YAAY,EAAE,yQAAe;IAC7B,IAAI,cAAc,IAAG;QACjB,WAAO,6OAAmB,EAAE;IAChC,CAAC;IACD,KAAK,EAAE,UAAU;AACrB","debugId":null}},
    {"offset": {"line": 1155, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/foundation/factories/serviceClients/cognitoIdentityProvider/createGetTokensFromRefreshTokenClient.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/foundation/factories/serviceClients/cognitoIdentityProvider/createGetTokensFromRefreshTokenClient.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { composeServiceApi } from '@aws-amplify/core/internals/aws-client-utils/composers';\nimport { createUserPoolDeserializer, createUserPoolSerializer, } from './shared/serde';\nimport { cognitoUserPoolTransferHandler } from './shared/handler';\nimport { DEFAULT_SERVICE_CLIENT_API_CONFIG } from './constants';\nexport const createGetTokensFromRefreshTokenClient = (config) => composeServiceApi(cognitoUserPoolTransferHandler, createUserPoolSerializer('GetTokensFromRefreshToken'), createUserPoolDeserializer(), {\n    ...DEFAULT_SERVICE_CLIENT_API_CONFIG,\n    ...config,\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAKY,MAAC,qCAAqC,GAAG,CAAC,MAAM,OAAK,kQAAiB,EAAC,kWAA8B,MAAE,oVAAwB,EAAC,2BAA2B,CAAC,MAAE,wVAA0B,EAAE,GAAE;QACpM,GAAG,2TAAiC;QACpC,GAAG,MAAM;IACb,CAAC","debugId":null}},
    {"offset": {"line": 1183, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/refreshAuthTokens.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/utils/refreshAuthTokens.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertTokenProviderConfig, deDupeAsyncFunction, decodeJWT, } from '@aws-amplify/core/internals/utils';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { assertAuthTokensWithRefreshToken } from '../utils/types';\nimport { AuthError } from '../../../errors/AuthError';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\nimport { createGetTokensFromRefreshTokenClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nconst refreshAuthTokensFunction = async ({ tokens, authConfig, username, }) => {\n    assertTokenProviderConfig(authConfig?.Cognito);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig.Cognito;\n    const region = getRegionFromUserPoolId(userPoolId);\n    assertAuthTokensWithRefreshToken(tokens);\n    const getTokensFromRefreshToken = createGetTokensFromRefreshTokenClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    const { AuthenticationResult } = await getTokensFromRefreshToken({ region }, {\n        ClientId: userPoolClientId,\n        RefreshToken: tokens.refreshToken,\n        DeviceKey: tokens.deviceMetadata?.deviceKey,\n    });\n    const accessToken = decodeJWT(AuthenticationResult?.AccessToken ?? '');\n    const idToken = AuthenticationResult?.IdToken\n        ? decodeJWT(AuthenticationResult.IdToken)\n        : undefined;\n    const { iat } = accessToken.payload;\n    // This should never happen. If it does, it's a bug from the service.\n    if (!iat) {\n        throw new AuthError({\n            name: 'iatNotFoundException',\n            message: 'iat not found in access token',\n        });\n    }\n    const clockDrift = iat * 1000 - new Date().getTime();\n    return {\n        accessToken,\n        idToken,\n        clockDrift,\n        refreshToken: AuthenticationResult?.RefreshToken ?? tokens.refreshToken,\n        username,\n    };\n};\nexport const refreshAuthTokens = deDupeAsyncFunction(refreshAuthTokensFunction);\nexport const refreshAuthTokensWithoutDedupe = refreshAuthTokensFunction;\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAOA,MAAM,yBAAyB,GAAG;QAAO,EAAE,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAG,KAAK;QAa5D,MAAM;QAZrB,qQAAyB,0DAAC,UAAU,CAAE,OAAO,CAAC;IAC9C,MAAM,EAAE,UAAU,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,GAAG,UAAU,CAAC,OAAO;IAC7E,MAAM,MAAM,OAAG,sQAAuB,EAAC,UAAU,CAAC;QAClD,+QAAgC,EAAC,MAAM,CAAC;IACxC,MAAM,yBAAyB,OAAG,2VAAqC,EAAC;QACpE,gBAAgB,MAAE,wTAAqC,EAAC;YACpD,gBAAgB,EAAE,gBAAgB;QAC9C,CAAS,CAAC;IACV,CAAK,CAAC;IACF,MAAM,EAAE,oBAAoB,EAAE,GAAG,MAAM,yBAAyB,CAAC;QAAE,MAAM;IAAA,CAAE,EAAE;QACzE,QAAQ,EAAE,gBAAgB;QAC1B,YAAY,EAAE,MAAM,CAAC,YAAY;QACjC,SAAS,mCAAS,cAAc,kFAAE,SAAS;IACnD,CAAK,CAAC;;IACF,MAAM,WAAW,OAAG,qPAAS,wIAAuB,WAAW,6DAAjC,oBAAoB,gBAAiB,EAAE,CAAC;IACtE,MAAM,OAAO,gFAAG,oBAAoB,CAAE,OAAA,QAChC,qPAAS,EAAC,oBAAoB,CAAC,OAAO,IACtC,SAAS;IACf,MAAM,EAAE,GAAG,EAAE,GAAG,WAAW,CAAC,OAAO;IACvC,qEAAA;IACI,IAAI,CAAC,GAAG,EAAE;QACN,MAAM,IAAI,qOAAS,CAAC;YAChB,IAAI,EAAE,sBAAsB;YAC5B,OAAO,EAAE,+BAA+B;QACpD,CAAS,CAAC;IACN;IACA,MAAM,UAAU,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE;;IACpD,OAAO;QACH,WAAW;QACX,OAAO;QACP,UAAU;QACV,YAAY,yIAAwB,YAAY,8DAAlC,oBAAoB,iBAAkB,MAAM,CAAC,YAAY;QACvE,QAAQ;IAChB,CAAK;AACL,CAAC;AACW,MAAC,iBAAiB,OAAG,wPAAmB,EAAC,yBAAyB;AAClE,MAAC,8BAA8B,GAAG","debugId":null}},
    {"offset": {"line": 1260, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/signInWithRedirectStore.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/utils/signInWithRedirectStore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { assertTokenProviderConfig } from '@aws-amplify/core/internals/utils';\nimport { getAuthStorageKeys } from '../tokenProvider/TokenStore';\nimport { OAuthStorageKeys } from './types';\nconst V5_HOSTED_UI_KEY = 'amplify-signin-with-hostedUI';\nconst name = 'CognitoIdentityServiceProvider';\nexport class DefaultOAuthStore {\n    constructor(keyValueStorage) {\n        this.keyValueStorage = keyValueStorage;\n    }\n    async clearOAuthInflightData() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        await Promise.all([\n            this.keyValueStorage.removeItem(authKeys.inflightOAuth),\n            this.keyValueStorage.removeItem(authKeys.oauthPKCE),\n            this.keyValueStorage.removeItem(authKeys.oauthState),\n        ]);\n    }\n    async clearOAuthData() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        await this.clearOAuthInflightData();\n        await this.keyValueStorage.removeItem(V5_HOSTED_UI_KEY); // remove in case a customer migrated an App from v5 to v6\n        return this.keyValueStorage.removeItem(authKeys.oauthSignIn);\n    }\n    loadOAuthState() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return this.keyValueStorage.getItem(authKeys.oauthState);\n    }\n    storeOAuthState(state) {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return this.keyValueStorage.setItem(authKeys.oauthState, state);\n    }\n    loadPKCE() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return this.keyValueStorage.getItem(authKeys.oauthPKCE);\n    }\n    storePKCE(pkce) {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return this.keyValueStorage.setItem(authKeys.oauthPKCE, pkce);\n    }\n    setAuthConfig(authConfigParam) {\n        this.cognitoConfig = authConfigParam;\n    }\n    async loadOAuthInFlight() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        return ((await this.keyValueStorage.getItem(authKeys.inflightOAuth)) === 'true');\n    }\n    async storeOAuthInFlight(inflight) {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        await this.keyValueStorage.setItem(authKeys.inflightOAuth, `${inflight}`);\n    }\n    async loadOAuthSignIn() {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        const isLegacyHostedUISignIn = await this.keyValueStorage.getItem(V5_HOSTED_UI_KEY);\n        const [isOAuthSignIn, preferPrivateSession] = (await this.keyValueStorage.getItem(authKeys.oauthSignIn))?.split(',') ??\n            [];\n        return {\n            isOAuthSignIn: isOAuthSignIn === 'true' || isLegacyHostedUISignIn === 'true',\n            preferPrivateSession: preferPrivateSession === 'true',\n        };\n    }\n    async storeOAuthSignIn(oauthSignIn, preferPrivateSession = false) {\n        assertTokenProviderConfig(this.cognitoConfig);\n        const authKeys = createKeysForAuthStorage(name, this.cognitoConfig.userPoolClientId);\n        await this.keyValueStorage.setItem(authKeys.oauthSignIn, `${oauthSignIn},${preferPrivateSession}`);\n    }\n}\nconst createKeysForAuthStorage = (provider, identifier) => {\n    return getAuthStorageKeys(OAuthStorageKeys)(provider, identifier);\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1355, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/oAuthStore.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/utils/oauth/oAuthStore.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { defaultStorage } from '@aws-amplify/core';\nimport { DefaultOAuthStore } from '../signInWithRedirectStore';\nexport const oAuthStore = new DefaultOAuthStore(defaultStorage);\n"],"names":[],"mappings":";;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAGY,MAAC,UAAU,GAAG,IAAI,kRAAiB,CAAC,uPAAc","debugId":null}},
    {"offset": {"line": 1372, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/utils/oauth/inflightPromise.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/utils/oauth/inflightPromise.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nconst inflightPromises = [];\nexport const addInflightPromise = (resolver) => {\n    inflightPromises.push(resolver);\n};\nexport const resolveAndClearInflightPromises = () => {\n    while (inflightPromises.length) {\n        inflightPromises.pop()?.();\n    }\n};\n"],"names":[],"mappings":"AAAA,qEAAA;AACA,sCAAA;;;;;;;AACA,MAAM,gBAAgB,GAAG,EAAE;AACf,MAAC,kBAAkB,GAAG,CAAC,QAAQ,KAAK;IAC5C,gBAAgB,CAAC,IAAI,CAAC,QAAQ,CAAC;AACnC;AACY,MAAC,+BAA+B,GAAG,MAAM;IACjD,MAAO,gBAAgB,CAAC,MAAM,CAAE;;kDACX,GAAG,EAAE,IAAI,sDAA1B,gBAAgB;IACpB;AACJ","debugId":null}},
    {"offset": {"line": 1396, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/TokenOrchestrator.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/tokenProvider/TokenOrchestrator.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Hub, } from '@aws-amplify/core';\nimport { AMPLIFY_SYMBOL, AmplifyErrorCode, assertTokenProviderConfig, isBrowser, isTokenExpired, } from '@aws-amplify/core/internals/utils';\nimport { assertServiceError } from '../../../errors/utils/assertServiceError';\nimport { AuthError } from '../../../errors/AuthError';\nimport { oAuthStore } from '../utils/oauth/oAuthStore';\nimport { addInflightPromise } from '../utils/oauth/inflightPromise';\nexport class TokenOrchestrator {\n    constructor() {\n        this.waitForInflightOAuth = isBrowser()\n            ? async () => {\n                if (!(await oAuthStore.loadOAuthInFlight())) {\n                    return;\n                }\n                if (this.inflightPromise) {\n                    return this.inflightPromise;\n                }\n                // when there is valid oauth config and there is an inflight oauth flow, try\n                // to block async calls that require fetching tokens before the oauth flow completes\n                // e.g. getCurrentUser, fetchAuthSession etc.\n                this.inflightPromise = new Promise((resolve, _reject) => {\n                    addInflightPromise(resolve);\n                });\n                return this.inflightPromise;\n            }\n            : async () => {\n                // no-op for non-browser environments\n            };\n    }\n    setAuthConfig(authConfig) {\n        oAuthStore.setAuthConfig(authConfig.Cognito);\n        this.authConfig = authConfig;\n    }\n    setTokenRefresher(tokenRefresher) {\n        this.tokenRefresher = tokenRefresher;\n    }\n    setAuthTokenStore(tokenStore) {\n        this.tokenStore = tokenStore;\n    }\n    getTokenStore() {\n        if (!this.tokenStore) {\n            throw new AuthError({\n                name: 'EmptyTokenStoreException',\n                message: 'TokenStore not set',\n            });\n        }\n        return this.tokenStore;\n    }\n    getTokenRefresher() {\n        if (!this.tokenRefresher) {\n            throw new AuthError({\n                name: 'EmptyTokenRefresherException',\n                message: 'TokenRefresher not set',\n            });\n        }\n        return this.tokenRefresher;\n    }\n    async getTokens(options) {\n        let tokens;\n        try {\n            assertTokenProviderConfig(this.authConfig?.Cognito);\n        }\n        catch (_err) {\n            // Token provider not configured\n            return null;\n        }\n        await this.waitForInflightOAuth();\n        this.inflightPromise = undefined;\n        tokens = await this.getTokenStore().loadTokens();\n        const username = await this.getTokenStore().getLastAuthUser();\n        if (tokens === null) {\n            return null;\n        }\n        const idTokenExpired = !!tokens?.idToken &&\n            isTokenExpired({\n                expiresAt: (tokens.idToken?.payload?.exp ?? 0) * 1000,\n                clockDrift: tokens.clockDrift ?? 0,\n            });\n        const accessTokenExpired = isTokenExpired({\n            expiresAt: (tokens.accessToken?.payload?.exp ?? 0) * 1000,\n            clockDrift: tokens.clockDrift ?? 0,\n        });\n        if (options?.forceRefresh || idTokenExpired || accessTokenExpired) {\n            tokens = await this.refreshTokens({\n                tokens,\n                username,\n            });\n            if (tokens === null) {\n                return null;\n            }\n        }\n        return {\n            accessToken: tokens?.accessToken,\n            idToken: tokens?.idToken,\n            signInDetails: tokens?.signInDetails,\n        };\n    }\n    async refreshTokens({ tokens, username, }) {\n        try {\n            const { signInDetails } = tokens;\n            const newTokens = await this.getTokenRefresher()({\n                tokens,\n                authConfig: this.authConfig,\n                username,\n            });\n            newTokens.signInDetails = signInDetails;\n            await this.setTokens({ tokens: newTokens });\n            Hub.dispatch('auth', { event: 'tokenRefresh' }, 'Auth', AMPLIFY_SYMBOL);\n            return newTokens;\n        }\n        catch (err) {\n            return this.handleErrors(err);\n        }\n    }\n    handleErrors(err) {\n        assertServiceError(err);\n        if (err.name !== AmplifyErrorCode.NetworkError) {\n            // TODO(v6): Check errors on client\n            this.clearTokens();\n        }\n        Hub.dispatch('auth', {\n            event: 'tokenRefresh_failure',\n            data: { error: err },\n        }, 'Auth', AMPLIFY_SYMBOL);\n        if (err.name.startsWith('NotAuthorizedException')) {\n            return null;\n        }\n        throw err;\n    }\n    async setTokens({ tokens }) {\n        return this.getTokenStore().storeTokens(tokens);\n    }\n    async clearTokens() {\n        return this.getTokenStore().clearTokens();\n    }\n    getDeviceMetadata(username) {\n        return this.getTokenStore().getDeviceMetadata(username);\n    }\n    clearDeviceMetadata(username) {\n        return this.getTokenStore().clearDeviceMetadata(username);\n    }\n    setOAuthMetadata(metadata) {\n        return this.getTokenStore().setOAuthMetadata(metadata);\n    }\n    getOAuthMetadata() {\n        return this.getTokenStore().getOAuthMetadata();\n    }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1571, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/CognitoUserPoolsTokenProvider.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/tokenProvider/CognitoUserPoolsTokenProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { defaultStorage, } from '@aws-amplify/core';\nimport { refreshAuthTokens } from '../utils/refreshAuthTokens';\nimport { DefaultTokenStore } from './TokenStore';\nimport { TokenOrchestrator } from './TokenOrchestrator';\nexport class CognitoUserPoolsTokenProvider {\n    constructor() {\n        this.authTokenStore = new DefaultTokenStore();\n        this.authTokenStore.setKeyValueStorage(defaultStorage);\n        this.tokenOrchestrator = new TokenOrchestrator();\n        this.tokenOrchestrator.setAuthTokenStore(this.authTokenStore);\n        this.tokenOrchestrator.setTokenRefresher(refreshAuthTokens);\n    }\n    getTokens({ forceRefresh } = { forceRefresh: false }) {\n        return this.tokenOrchestrator.getTokens({ forceRefresh });\n    }\n    setKeyValueStorage(keyValueStorage) {\n        this.authTokenStore.setKeyValueStorage(keyValueStorage);\n    }\n    setAuthConfig(authConfig) {\n        this.authTokenStore.setAuthConfig(authConfig);\n        this.tokenOrchestrator.setAuthConfig(authConfig);\n    }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAKO,MAAM,6BAA6B,CAAC;IAQvC,SAAS,GAA6C;cAA1C,YAAY,EAAE,GAAhB,iEAAmB;YAAE,YAAY,EAAE,KAAK;QAAA,CAAE;QAChD,OAAO,IAAI,CAAC,iBAAiB,CAAC,SAAS,CAAC;YAAE,YAAY;QAAA,CAAE,CAAC;IAC7D;IACA,kBAAkB,CAAC,eAAe,EAAE;QAChC,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,eAAe,CAAC;IAC3D;IACA,aAAa,CAAC,UAAU,EAAE;QACtB,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,UAAU,CAAC;QAC7C,IAAI,CAAC,iBAAiB,CAAC,aAAa,CAAC,UAAU,CAAC;IACpD;IAhBA,WAAW,EAAG;QACV,IAAI,CAAC,cAAc,GAAG,IAAI,6QAAiB,EAAE;QAC7C,IAAI,CAAC,cAAc,CAAC,kBAAkB,CAAC,uPAAc,CAAC;QACtD,IAAI,CAAC,iBAAiB,GAAG,IAAI,oRAAiB,EAAE;QAChD,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC;QAC7D,IAAI,CAAC,iBAAiB,CAAC,iBAAiB,CAAC,4QAAiB,CAAC;IAC/D;AAWJ","debugId":null}},
    {"offset": {"line": 1615, "column": 0}, "map": {"version":3,"file":"turbopack:///[project]/christmas-store-registration/node_modules/@aws-amplify/auth/dist/esm/providers/cognito/tokenProvider/tokenProvider.mjs","sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-amplify/auth/src/providers/cognito/tokenProvider/tokenProvider.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CognitoUserPoolsTokenProvider } from './CognitoUserPoolsTokenProvider';\n/**\n * The default provider for the JWT access token and ID token issued from the configured Cognito user pool. It manages\n * the refresh and storage of the tokens. It stores the tokens in `window.localStorage` if available, and falls back to\n * in-memory storage if not.\n */\nexport const cognitoUserPoolsTokenProvider = new CognitoUserPoolsTokenProvider();\nexport const { tokenOrchestrator } = cognitoUserPoolsTokenProvider;\n"],"names":[],"mappings":";;;;;;;;AAAA,qEAAA;AACA,sCAAA;AAEA;;;;CAIA,GACY,MAAC,6BAA6B,GAAG,IAAI,4SAA6B;AAClE,MAAC,EAAE,iBAAiB,EAAE,GAAG","debugId":null}}]
}