{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 10, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js"],"sourcesContent":["import { ProviderError } from \"@smithy/property-provider\";\nimport { Buffer } from \"buffer\";\nimport { request } from \"http\";\nexport function httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = request({\n            method: \"GET\",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AACO,SAAS,YAAY,OAAO;IAC/B,OAAO,IAAI,QAAQ,CAAC,SAAS;QACzB,MAAM,MAAM,IAAA,4GAAO,EAAC;YAChB,QAAQ;YACR,GAAG,OAAO;YACV,UAAU,QAAQ,QAAQ,EAAE,QAAQ,cAAc;QACtD;QACA,IAAI,EAAE,CAAC,SAAS,CAAC;YACb,OAAO,OAAO,MAAM,CAAC,IAAI,6RAAa,CAAC,mDAAmD;YAC1F,IAAI,OAAO;QACf;QACA,IAAI,EAAE,CAAC,WAAW;YACd,OAAO,IAAI,6RAAa,CAAC;YACzB,IAAI,OAAO;QACf;QACA,IAAI,EAAE,CAAC,YAAY,CAAC;YAChB,MAAM,EAAE,aAAa,GAAG,EAAE,GAAG;YAC7B,IAAI,aAAa,OAAO,OAAO,YAAY;gBACvC,OAAO,OAAO,MAAM,CAAC,IAAI,6RAAa,CAAC,2DAA2D;oBAAE;gBAAW;gBAC/G,IAAI,OAAO;YACf;YACA,MAAM,SAAS,EAAE;YACjB,IAAI,EAAE,CAAC,QAAQ,CAAC;gBACZ,OAAO,IAAI,CAAC;YAChB;YACA,IAAI,EAAE,CAAC,OAAO;gBACV,QAAQ,+GAAM,CAAC,MAAM,CAAC;gBACtB,IAAI,OAAO;YACf;QACJ;QACA,IAAI,GAAG;IACX;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js"],"sourcesContent":["export const isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexport const fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n    ...(creds.AccountId && { accountId: creds.AccountId }),\n});\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,oBAAoB,CAAC,MAAQ,QAAQ,QAC9C,OAAO,QAAQ,YACf,OAAO,IAAI,WAAW,KAAK,YAC3B,OAAO,IAAI,eAAe,KAAK,YAC/B,OAAO,IAAI,KAAK,KAAK,YACrB,OAAO,IAAI,UAAU,KAAK;AACvB,MAAM,sBAAsB,CAAC,QAAU,CAAC;QAC3C,aAAa,MAAM,WAAW;QAC9B,iBAAiB,MAAM,eAAe;QACtC,cAAc,MAAM,KAAK;QACzB,YAAY,IAAI,KAAK,MAAM,UAAU;QACrC,GAAI,MAAM,SAAS,IAAI;YAAE,WAAW,MAAM,SAAS;QAAC,CAAC;IACzD,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 91, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js"],"sourcesContent":["export const DEFAULT_TIMEOUT = 1000;\nexport const DEFAULT_MAX_RETRIES = 0;\nexport const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,kBAAkB;AACxB,MAAM,sBAAsB;AAC5B,MAAM,yBAAyB,CAAC,EAAE,aAAa,mBAAmB,EAAE,UAAU,eAAe,EAAG,GAAK,CAAC;QAAE;QAAY;IAAQ,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/remoteProvider/retry.js"],"sourcesContent":["export const retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n"],"names":[],"mappings":";;;;AAAO,MAAM,QAAQ,CAAC,SAAS;IAC3B,IAAI,UAAU;IACd,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,IAAK;QACjC,UAAU,QAAQ,KAAK,CAAC;IAC5B;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/fromContainerMetadata.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", {\n        tryNextLink: false,\n        logger,\n    });\n};\n"],"names":[],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACO,MAAM,oBAAoB;AAC1B,MAAM,wBAAwB;AAC9B,MAAM,sBAAsB;AAC5B,MAAM,wBAAwB,CAAC,OAAO,CAAC,CAAC;IAC3C,MAAM,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,IAAA,uUAAsB,EAAC;IACvD,OAAO,IAAM,IAAA,ySAAK,EAAC;YACf,MAAM,iBAAiB,MAAM,WAAW;gBAAE,QAAQ,KAAK,MAAM;YAAC;YAC9D,MAAM,gBAAgB,KAAK,KAAK,CAAC,MAAM,mBAAmB,SAAS;YACnE,IAAI,CAAC,IAAA,+TAAiB,EAAC,gBAAgB;gBACnC,MAAM,IAAI,mTAAwB,CAAC,6DAA6D;oBAC5F,QAAQ,KAAK,MAAM;gBACvB;YACJ;YACA,OAAO,IAAA,iUAAmB,EAAC;QAC/B,GAAG;AACP;AACA,MAAM,qBAAqB,OAAO,SAAS;IACvC,IAAI,QAAQ,GAAG,CAAC,oBAAoB,EAAE;QAClC,QAAQ,OAAO,GAAG;YACd,GAAG,QAAQ,OAAO;YAClB,eAAe,QAAQ,GAAG,CAAC,oBAAoB;QACnD;IACJ;IACA,MAAM,SAAS,MAAM,IAAA,qTAAW,EAAC;QAC7B,GAAG,OAAO;QACV;IACJ;IACA,OAAO,OAAO,QAAQ;AAC1B;AACA,MAAM,UAAU;AAChB,MAAM,mBAAmB;IACrB,WAAW;IACX,aAAa;AACjB;AACA,MAAM,uBAAuB;IACzB,SAAS;IACT,UAAU;AACd;AACA,MAAM,aAAa,OAAO,EAAE,MAAM,EAAE;IAChC,IAAI,QAAQ,GAAG,CAAC,sBAAsB,EAAE;QACpC,OAAO;YACH,UAAU;YACV,MAAM,QAAQ,GAAG,CAAC,sBAAsB;QAC5C;IACJ;IACA,IAAI,QAAQ,GAAG,CAAC,kBAAkB,EAAE;QAChC,MAAM,SAAS,IAAA,wGAAK,EAAC,QAAQ,GAAG,CAAC,kBAAkB;QACnD,IAAI,CAAC,OAAO,QAAQ,IAAI,CAAC,CAAC,OAAO,QAAQ,IAAI,gBAAgB,GAAG;YAC5D,MAAM,IAAI,mTAAwB,CAAC,GAAG,OAAO,QAAQ,CAAC,mDAAmD,CAAC,EAAE;gBACxG,aAAa;gBACb;YACJ;QACJ;QACA,IAAI,CAAC,OAAO,QAAQ,IAAI,CAAC,CAAC,OAAO,QAAQ,IAAI,oBAAoB,GAAG;YAChE,MAAM,IAAI,mTAAwB,CAAC,GAAG,OAAO,QAAQ,CAAC,mDAAmD,CAAC,EAAE;gBACxG,aAAa;gBACb;YACJ;QACJ;QACA,OAAO;YACH,GAAG,MAAM;YACT,MAAM,OAAO,IAAI,GAAG,SAAS,OAAO,IAAI,EAAE,MAAM;QACpD;IACJ;IACA,MAAM,IAAI,mTAAwB,CAAC,qEAC/B,CAAC,KAAK,EAAE,sBAAsB,IAAI,EAAE,kBAAkB,YAAY,CAAC,GACnE,oBAAoB;QACpB,aAAa;QACb;IACJ;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 221, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport class InstanceMetadataV1FallbackError extends CredentialsProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"InstanceMetadataV1FallbackError\";\n        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,wCAAwC,mTAAwB;IACzE,YAAY,OAAO,EAAE,cAAc,IAAI,CAAE;QACrC,KAAK,CAAC,SAAS;QACf,IAAI,CAAC,WAAW,GAAG;QACnB,IAAI,CAAC,IAAI,GAAG;QACZ,OAAO,cAAc,CAAC,IAAI,EAAE,gCAAgC,SAAS;IACzE;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/config/Endpoint.js"],"sourcesContent":["export var Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint || (Endpoint = {}));\n"],"names":[],"mappings":";;;;AAAO,IAAI;AACX,CAAC,SAAU,QAAQ;IACf,QAAQ,CAAC,OAAO,GAAG;IACnB,QAAQ,CAAC,OAAO,GAAG;AACvB,CAAC,EAAE,YAAY,CAAC,WAAW,CAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 252, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js"],"sourcesContent":["export const ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexport const CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexport const ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n"],"names":[],"mappings":";;;;;;;;AAAO,MAAM,oBAAoB;AAC1B,MAAM,uBAAuB;AAC7B,MAAM,0BAA0B;IACnC,6BAA6B,CAAC,MAAQ,GAAG,CAAC,kBAAkB;IAC5D,oBAAoB,CAAC,UAAY,OAAO,CAAC,qBAAqB;IAC9D,SAAS;AACb","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/config/EndpointMode.js"],"sourcesContent":["export var EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode || (EndpointMode = {}));\n"],"names":[],"mappings":";;;;AAAO,IAAI;AACX,CAAC,SAAU,YAAY;IACnB,YAAY,CAAC,OAAO,GAAG;IACvB,YAAY,CAAC,OAAO,GAAG;AAC3B,CAAC,EAAE,gBAAgB,CAAC,eAAe,CAAC,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 284, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js"],"sourcesContent":["import { EndpointMode } from \"./EndpointMode\";\nexport const ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexport const CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexport const ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n"],"names":[],"mappings":";;;;;;;;AAAA;;AACO,MAAM,yBAAyB;AAC/B,MAAM,4BAA4B;AAClC,MAAM,+BAA+B;IACxC,6BAA6B,CAAC,MAAQ,GAAG,CAAC,uBAAuB;IACjE,oBAAoB,CAAC,UAAY,OAAO,CAAC,0BAA0B;IACnE,SAAS,+SAAY,CAAC,IAAI;AAC9B","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 305, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js"],"sourcesContent":["import { loadConfig } from \"@smithy/node-config-provider\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return InstanceMetadataEndpoint.IPv4;\n        case EndpointMode.IPv6:\n            return InstanceMetadataEndpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;AACO,MAAM,8BAA8B,UAAY,IAAA,yQAAQ,EAAC,AAAC,MAAM,2BAA6B,MAAM;AAC1G,MAAM,wBAAwB,UAAY,IAAA,+RAAU,EAAC,mUAAuB;AAC5E,MAAM,4BAA4B;IAC9B,MAAM,eAAe,MAAM,IAAA,+RAAU,EAAC,4UAA4B;IAClE,OAAQ;QACJ,KAAK,+SAAY,CAAC,IAAI;YAClB,OAAO,uSAAwB,CAAC,IAAI;QACxC,KAAK,+SAAY,CAAC,IAAI;YAClB,OAAO,uSAAwB,CAAC,IAAI;QACxC;YACI,MAAM,IAAI,MAAM,CAAC,2BAA2B,EAAE,aAAa,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,MAAM,CAAC,+SAAY,GAAG;IACrH;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 338, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js"],"sourcesContent":["const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nexport const getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn(\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these \" +\n        `credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: ` +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n"],"names":[],"mappings":";;;;AAAA,MAAM,4CAA4C,IAAI;AACtD,MAAM,0DAA0D,IAAI;AACpE,MAAM,2BAA2B;AAC1B,MAAM,yCAAyC,CAAC,aAAa;IAChE,MAAM,kBAAkB,4CACpB,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;IAC/B,MAAM,gBAAgB,IAAI,KAAK,KAAK,GAAG,KAAK,kBAAkB;IAC9D,OAAO,IAAI,CAAC,mHACR,CAAC,oCAAoC,EAAE,IAAI,KAAK,eAAe,uCAAuC,CAAC,GACvG;IACJ,MAAM,qBAAqB,YAAY,kBAAkB,IAAI,YAAY,UAAU;IACnF,OAAO;QACH,GAAG,WAAW;QACd,GAAI,qBAAqB;YAAE;QAAmB,IAAI,CAAC,CAAC;QACpD,YAAY;IAChB;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 362, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js"],"sourcesContent":["import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,0BAA0B,CAAC,UAAU,UAAU,CAAC,CAAC;IAC1D,MAAM,SAAS,SAAS,UAAU;IAClC,IAAI;IACJ,OAAO;QACH,IAAI;QACJ,IAAI;YACA,cAAc,MAAM;YACpB,IAAI,YAAY,UAAU,IAAI,YAAY,UAAU,CAAC,OAAO,KAAK,KAAK,GAAG,IAAI;gBACzE,cAAc,IAAA,kWAAsC,EAAC,aAAa;YACtE;QACJ,EACA,OAAO,GAAG;YACN,IAAI,iBAAiB;gBACjB,OAAO,IAAI,CAAC,6BAA6B;gBACzC,cAAc,IAAA,kWAAsC,EAAC,iBAAiB;YAC1E,OACK;gBACD,MAAM;YACV;QACJ;QACA,kBAAkB;QAClB,OAAO;IACX;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/nested-clients/node_modules/%40smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js"],"sourcesContent":["import { loadConfig } from \"@smithy/node-config-provider\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { InstanceMetadataV1FallbackError } from \"./error/InstanceMetadataV1FallbackError\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\nconst X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await loadConfig({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push(\"credential provider initialization (runtime option ec2MetadataV1Disabled)\");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\", \")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 557, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}