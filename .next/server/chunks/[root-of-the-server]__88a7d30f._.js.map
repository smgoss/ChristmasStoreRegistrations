{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/src/lib/amplify.ts"],"sourcesContent":["import { Amplify } from 'aws-amplify';\nimport outputs from '../../amplify_outputs.json';\n\n// Single place to configure Amplify on both client/server where needed\nif (!Amplify.getConfig()?.Auth) {\n  Amplify.configure(outputs);\n}\n\nexport {}; // side-effect module\n\n"],"names":[],"mappings":";AAAA;AACA;;;AAEA,uEAAuE;AACvE,IAAI,CAAC,+PAAO,CAAC,SAAS,IAAI,MAAM;IAC9B,+PAAO,CAAC,SAAS,CAAC,wIAAO;AAC3B;CAEW,qBAAqB","debugId":null}},
    {"offset": {"line": 78, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/src/app/api/register/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { generateClient } from 'aws-amplify/data';\nimport type { Schema } from '../../../../amplify/data/resource';\nimport '@/lib/amplify';\nimport { z } from 'zod';\n\nconst client = generateClient<Schema>();\n\n// In-memory rate limiting (best-effort; use durable store in production)\nconst RATE_LIMIT_WINDOW_MS = 60_000; // 1 minute\nconst RATE_LIMIT_MAX = 10; // max requests per window per IP\nconst rateMap = new Map<string, { count: number; windowStart: number }>();\n\nfunction getClientIp(req: Request) {\n  const xff = req.headers.get('x-forwarded-for');\n  if (xff) return xff.split(',')[0].trim();\n  const xfci = req.headers.get('x-client-ip');\n  if (xfci) return xfci;\n  return 'unknown';\n}\n\nfunction checkRateLimit(req: Request) {\n  const ip = getClientIp(req);\n  const now = Date.now();\n  const rec = rateMap.get(ip);\n  if (!rec || now - rec.windowStart > RATE_LIMIT_WINDOW_MS) {\n    rateMap.set(ip, { count: 1, windowStart: now });\n    return true;\n  }\n  if (rec.count >= RATE_LIMIT_MAX) return false;\n  rec.count += 1;\n  return true;\n}\n\n// Per-timeSlot in-memory mutex to reduce race conditions on capacity\nconst slotQueues = new Map<string, Promise<void>>();\nasync function withSlotLock<T>(slotKey: string, fn: () => Promise<T>): Promise<T> {\n  const prev = slotQueues.get(slotKey) || Promise.resolve();\n  let release: () => void;\n  const next = new Promise<void>((res) => (release = res));\n  slotQueues.set(slotKey, prev.then(() => next));\n  await prev;\n  try {\n    return await fn();\n  } finally {\n    // @ts-ignore release is assigned above\n    release();\n    // Cleanup if this is the last queued promise\n    const current = slotQueues.get(slotKey);\n    if (current === next) slotQueues.delete(slotKey);\n  }\n}\n\nconst ChildSchema = z.object({\n  age: z.union([z.string(), z.number()]),\n  gender: z.enum(['boy', 'girl']),\n});\n\nconst RegistrationSchema = z.object({\n  firstName: z.string().trim().min(1),\n  lastName: z.string().trim().min(1),\n  email: z.string().trim().email(),\n  phone: z.string().trim().min(7),\n  numberOfKids: z.number().int().min(0),\n  timeSlot: z.string().trim().min(1),\n  needsChildcare: z.boolean(),\n  referredBy: z.string().optional(),\n  inviteToken: z.string().optional(),\n  children: z.array(ChildSchema).optional(),\n  recaptchaToken: z.string().optional(),\n});\n\nexport async function POST(req: Request) {\n  try {\n    if (!checkRateLimit(req)) {\n      return NextResponse.json({ error: 'Too many requests. Please try again later.' }, { status: 429 });\n    }\n\n    const json = await req.json();\n    const parsed = RegistrationSchema.safeParse(json);\n    if (!parsed.success) {\n      return NextResponse.json({ error: 'Invalid input', details: parsed.error.flatten() }, { status: 400 });\n    }\n    const { firstName, lastName, email, phone, numberOfKids, timeSlot, needsChildcare, referredBy, inviteToken, children = [], recaptchaToken } = parsed.data;\n\n    // Verify reCAPTCHA if configured\n    if (process.env.RECAPTCHA_SECRET) {\n      if (!recaptchaToken) {\n        return NextResponse.json({ error: 'Captcha verification is required' }, { status: 400 });\n      }\n      try {\n        const resp = await fetch('https://www.google.com/recaptcha/api/siteverify', {\n          method: 'POST',\n          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n          body: new URLSearchParams({\n            secret: process.env.RECAPTCHA_SECRET,\n            response: recaptchaToken,\n          }).toString(),\n        });\n        const data = await resp.json();\n        if (!data.success) {\n          return NextResponse.json({ error: 'Captcha verification failed' }, { status: 400 });\n        }\n      } catch (e) {\n        console.error('reCAPTCHA verify error', e);\n        return NextResponse.json({ error: 'Captcha verification error' }, { status: 400 });\n      }\n    }\n\n    // Check duplicates on server\n    const [emailCheck, phoneCheck] = await Promise.all([\n      client.models.Registration.list({ filter: { email: { eq: email } } }),\n      client.models.Registration.list({ filter: { phone: { eq: phone } } }),\n    ]);\n\n    if (emailCheck.data?.length) {\n      return NextResponse.json({ error: 'Someone is already registered with this email address' }, { status: 409 });\n    }\n    if (phoneCheck.data?.length) {\n      return NextResponse.json({ error: 'Someone is already registered with this phone number' }, { status: 409 });\n    }\n\n    // Enforce registration status\n    const { data: configData } = await client.models.RegistrationConfig.list();\n    const config = configData?.[0];\n    if (config) {\n      if (!config.isRegistrationOpen) {\n        return NextResponse.json({ error: config.closureMessage || 'Registration is currently closed.' }, { status: 403 });\n      }\n      if (config.inviteOnlyMode && !inviteToken) {\n        return NextResponse.json({ error: 'Registration is invite-only. An invite token is required.' }, { status: 403 });\n      }\n    }\n\n    // Optional: delegate to durable reservation Lambda if configured\n    if (process.env.RESERVE_FUNCTION_NAME) {\n      try {\n        const { LambdaClient, InvokeCommand } = await import('@aws-sdk/client-lambda');\n        const lc = new LambdaClient({});\n        const ivk = new InvokeCommand({\n          FunctionName: process.env.RESERVE_FUNCTION_NAME,\n          Payload: new TextEncoder().encode(JSON.stringify({ input: { firstName, lastName, email, phone, numberOfKids, timeSlot, needsChildcare, referredBy, inviteToken, children } })),\n        });\n        const res = await lc.send(ivk);\n        const payloadStr = res.Payload ? new TextDecoder().decode(res.Payload) : '{}';\n        const payload = JSON.parse(payloadStr || '{}');\n        if (payload?.ok) {\n          return NextResponse.json({ id: payload.id }, { status: 201 });\n        } else {\n          return NextResponse.json({ error: payload?.error || 'Reservation failed' }, { status: 409 });\n        }\n      } catch (e) {\n        console.error('Durable reservation failed; falling back', e);\n        // fall through to local lock path\n      }\n    }\n\n    // Wrap the entire capacity check + create in a per-slot lock\n    return await withSlotLock(timeSlot, async () => {\n      // Capacity check (pre-create)\n      const { data: slotList } = await client.models.TimeSlotConfig.list({ filter: { timeSlot: { eq: timeSlot } } });\n      const slot = slotList?.[0];\n      if (!slot) {\n        return NextResponse.json({ error: 'Selected time slot is not available' }, { status: 400 });\n      }\n\n      const { data: regsInSlot } = await client.models.Registration.list({\n        filter: { timeSlot: { eq: timeSlot }, isCancelled: { ne: true } },\n      });\n      const currentCount = regsInSlot?.length ?? 0;\n      if (currentCount >= (slot.maxCapacity || 0)) {\n        return NextResponse.json({ error: 'This time slot is full' }, { status: 409 });\n      }\n\n      // If invite token is present, validate not used\n      if (inviteToken) {\n        const { data: invites } = await client.models.InviteLink.list({ filter: { token: { eq: inviteToken } } });\n        const invite = invites?.[0];\n        if (!invite || invite.isUsed) {\n          return NextResponse.json({ error: 'Invalid or already used invite token' }, { status: 400 });\n        }\n      }\n\n      // Create registration\n      const now = new Date().toISOString();\n      const regResult = await client.models.Registration.create({\n        firstName,\n        lastName,\n        email,\n        phone,\n        numberOfKids,\n        timeSlot,\n        needsChildcare,\n        referredBy: referredBy || undefined,\n        inviteToken,\n        registrationDate: now,\n      });\n\n      const reg = regResult.data;\n      if (!reg) {\n        return NextResponse.json({ error: 'Failed to create registration' }, { status: 500 });\n      }\n\n      // Create child records if provided\n      if (Array.isArray(children) && numberOfKids > 0) {\n        for (const child of children) {\n          if (!child) continue;\n          await client.models.Child.create({\n            registrationId: reg.id,\n            age: child.age,\n            gender: child.gender,\n          });\n        }\n      }\n\n      // Post-create capacity recheck to reduce race conditions\n      const { data: regsInSlotAfter } = await client.models.Registration.list({\n        filter: { timeSlot: { eq: timeSlot }, isCancelled: { ne: true } },\n      });\n      const newCount = regsInSlotAfter?.length ?? 0;\n      if (newCount > (slot.maxCapacity || 0)) {\n        // Roll back this registration\n        await client.models.Registration.delete({ id: reg.id });\n        return NextResponse.json({ error: 'This time slot just filled up. Please choose another.' }, { status: 409 });\n      }\n\n      // Mark invite as used (best effort) if applicable\n      if (inviteToken) {\n        const { data: invites2 } = await client.models.InviteLink.list({ filter: { token: { eq: inviteToken } } });\n        const invite2 = invites2?.[0];\n        if (invite2 && !invite2.isUsed) {\n          await client.models.InviteLink.update({ id: invite2.id, isUsed: true, usedAt: now });\n        }\n      }\n\n      return NextResponse.json({ id: reg.id }, { status: 201 });\n    });\n  } catch (err) {\n    console.error('Registration error:', err);\n    return NextResponse.json({ error: 'Server error' }, { status: 500 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}