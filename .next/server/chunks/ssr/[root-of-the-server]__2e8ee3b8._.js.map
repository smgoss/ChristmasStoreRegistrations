{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/src/hooks/useLocationConfig.ts"],"sourcesContent":["import { useState, useEffect } from 'react';\n\ninterface LocationConfig {\n  locationName: string;\n  shortName: string;\n  locationAddress: string;\n  timeSlots: string[];\n  defaultCapacity: number;\n  contactEmail: string;\n  fromEmail: string;\n  branding: {\n    primaryColor: string;\n    secondaryColor: string;\n    locationEmoji: string;\n    campusColor: string;\n  };\n  churchInfo: {\n    website: string;\n    phone: string;\n  };\n}\n\n// Import all configs\nconst location1Config = require('../../config/location1.json') as LocationConfig;\nconst location2Config = require('../../config/location2.json') as LocationConfig;\nconst location3Config = require('../../config/location3.json') as LocationConfig;\n\nexport function useLocationConfig(): LocationConfig {\n  const [config, setConfig] = useState<LocationConfig>(location1Config);\n\n  useEffect(() => {\n    // Get location from environment variable or URL parameter or localStorage\n    const getLocationFromEnvironment = () => {\n      // Check environment variable first\n      if (typeof window !== 'undefined') {\n        // Check URL parameters\n        const urlParams = new URLSearchParams(window.location.search);\n        const urlLocation = urlParams.get('location');\n        if (urlLocation) {\n          localStorage.setItem('selectedLocation', urlLocation);\n          return urlLocation;\n        }\n\n        // Check localStorage\n        const savedLocation = localStorage.getItem('selectedLocation');\n        if (savedLocation) {\n          return savedLocation;\n        }\n      }\n\n      // Fall back to environment variable\n      return process.env.NEXT_PUBLIC_LOCATION || 'location1';\n    };\n\n    const location = getLocationFromEnvironment();\n    \n    switch (location) {\n      case 'location1':\n        setConfig(location1Config);\n        break;\n      case 'location2':\n        setConfig(location2Config);\n        break;\n      case 'location3':\n        setConfig(location3Config);\n        break;\n      default:\n        setConfig(location1Config);\n    }\n  }, []);\n\n  return config;\n}"],"names":[],"mappings":";;;;AAAA;;AAsBA,qBAAqB;AACrB,MAAM;AACN,MAAM;AACN,MAAM;AAEC,SAAS;IACd,MAAM,CAAC,QAAQ,UAAU,GAAG,IAAA,iNAAQ,EAAiB;IAErD,IAAA,kNAAS,EAAC;QACR,0EAA0E;QAC1E,MAAM,6BAA6B;YACjC,mCAAmC;YACnC;;YAgBA,oCAAoC;YACpC,OAAO,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QAC7C;QAEA,MAAM,WAAW;QAEjB,OAAQ;YACN,KAAK;gBACH,UAAU;gBACV;YACF,KAAK;gBACH,UAAU;gBACV;YACF,KAAK;gBACH,UAAU;gBACV;YACF;gBACE,UAAU;QACd;IACF,GAAG,EAAE;IAEL,OAAO;AACT","debugId":null}},
    {"offset": {"line": 106, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/src/app/admin/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Authenticator, Theme, ThemeProvider } from '@aws-amplify/ui-react';\nimport '@aws-amplify/ui-react/styles.css';\nimport { generateClient } from 'aws-amplify/data';\nimport { Amplify } from 'aws-amplify';\nimport type { Schema } from '../../../amplify/data/resource';\nimport outputs from '../../../amplify_outputs.json';\nimport { useLocationConfig } from '../../hooks/useLocationConfig';\n\nAmplify.configure(outputs);\nconst client = generateClient<Schema>({\n  authMode: 'userPool'\n});\n\nconst christmasTheme: Theme = {\n  name: 'christmas-theme',\n  tokens: {\n    colors: {\n      brand: {\n        primary: {\n          10: '#f0fdf4',\n          20: '#dcfce7',\n          40: '#86efac',\n          60: '#22c55e',\n          80: '#16a34a',\n          90: '#15803d',\n          100: '#14532d'\n        }\n      },\n      background: {\n        primary: '#fef7f0',\n        secondary: '#fef2f2'\n      }\n    },\n    components: {\n      authenticator: {\n        router: {\n          boxShadow: '0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)',\n          borderRadius: '1rem'\n        },\n        form: {\n          padding: '2rem'\n        }\n      },\n      button: {\n        primary: {\n          backgroundColor: '{colors.brand.primary.80}',\n          _hover: {\n            backgroundColor: '{colors.brand.primary.90}'\n          }\n        }\n      },\n      fieldset: {\n        borderRadius: '0.75rem'\n      },\n      input: {\n        borderRadius: '0.75rem'\n      }\n    }\n  }\n};\n\ninterface TimeSlotConfig {\n  id: string;\n  timeSlot: string;\n  maxCapacity: number;\n  currentRegistrations: number;\n  isActive: boolean;\n}\n\ninterface Registration {\n  id: string;\n  firstName: string;\n  lastName: string;\n  email: string;\n  phone: string;\n  timeSlot: string;\n  numberOfKids: number;\n  needsChildcare: boolean;\n  referredBy?: string;\n  registrationDate: string;\n  attendanceConfirmed?: boolean;\n  attendanceConfirmedAt?: string;\n  isCancelled?: boolean;\n  cancelledAt?: string;\n  confirmationToken?: string;\n}\n\ninterface RegistrationConfig {\n  id: string;\n  isRegistrationOpen: boolean;\n  inviteOnlyMode: boolean;\n  scheduledCloseDate?: string;\n  autoCloseEnabled: boolean;\n  closureMessage: string;\n  updatedBy?: string;\n  updatedAt?: string;\n}\n\n// TIME_SLOTS is now imported from locationConfig\n\nfunction AdminDashboard() {\n  const locationConfig = useLocationConfig();\n  const { \n    timeSlots: TIME_SLOTS, \n    locationName: LOCATION_NAME,\n    branding: BRANDING,\n    defaultCapacity: DEFAULT_CAPACITY \n  } = locationConfig;\n\n  const [timeSlots, setTimeSlots] = useState<TimeSlotConfig[]>([]);\n  const [registrations, setRegistrations] = useState<Registration[]>([]);\n  const [inviteEmail, setInviteEmail] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [message, setMessage] = useState('');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [editingRegistration, setEditingRegistration] = useState<string | null>(null);\n  const [editFormData, setEditFormData] = useState<Registration | null>(null);\n  const [newTimeSlot, setNewTimeSlot] = useState('');\n  const [editingTimeSlot, setEditingTimeSlot] = useState<string | null>(null);\n  const [registrationConfig, setRegistrationConfig] = useState<RegistrationConfig | null>(null);\n  const [scheduledCloseDate, setScheduledCloseDate] = useState('');\n  const [scheduledCloseTime, setScheduledCloseTime] = useState('');\n  const [customClosureMessage, setCustomClosureMessage] = useState('');\n\n  useEffect(() => {\n    const initializeAndLoadData = async () => {\n      try {\n        console.log('üîç Loading admin dashboard...');\n        setLoading(true);\n        \n        // Check if time slots exist first\n        const { data: existingSlots } = await client.models.TimeSlotConfig.list();\n        console.log('üìä Found existing slots:', existingSlots.length, existingSlots);\n        \n        if (existingSlots.length === 0) {\n          console.log('üöÄ No time slots found, auto-initializing...');\n          setMessage('üîÑ Setting up time slots...');\n          \n          try {\n            // Auto-initialize time slots with location-specific capacity\n            const createPromises = TIME_SLOTS.map(async (slot, index) => {\n              console.log(`‚è∞ Creating time slot ${index + 1}: ${slot}`);\n              const result = await client.models.TimeSlotConfig.create({\n                timeSlot: slot,\n                maxCapacity: DEFAULT_CAPACITY,\n                currentRegistrations: 0,\n                isActive: true\n              });\n              console.log(`‚úÖ Created time slot: ${slot}`, result);\n              return result;\n            });\n            \n            const results = await Promise.all(createPromises);\n            console.log('üéâ All time slots created successfully:', results.length);\n            setMessage('‚úÖ Time slots ready! You can now manage registrations.');\n            \n            // Small delay to show success message\n            setTimeout(() => setMessage(''), 2000);\n          } catch (createError) {\n            console.error('‚ùå Error creating time slots:', createError);\n            setMessage('‚ùå Error setting up time slots. Please try refreshing the page.');\n          }\n        }\n        \n        // Load all data (this will now include the newly created slots if any)\n        console.log('üì• Loading all dashboard data...');\n        await loadData();\n        console.log('‚úÖ Dashboard data loaded successfully');\n        \n      } catch (error) {\n        console.error('üí• Critical error in admin dashboard:', error);\n        setMessage('‚ùå Error loading admin dashboard. Check console and refresh the page.');\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    initializeAndLoadData();\n  }, []);\n\n  const loadData = async () => {\n    try {\n      console.log('üì• Loading data with user pool auth...');\n      \n      // Load registration configuration (singleton)\n      console.log('üîç Fetching registration config...');\n      const { data: configData } = await client.models.RegistrationConfig.list();\n      let config = configData?.[0] as RegistrationConfig;\n      \n      if (!config) {\n        // Create default config if none exists\n        console.log('üöÄ Creating default registration config...');\n        const { data: newConfig } = await client.models.RegistrationConfig.create({\n          id: 'main',\n          isRegistrationOpen: true,\n          inviteOnlyMode: false,\n          autoCloseEnabled: false,\n          closureMessage: 'Registration is currently closed. Please check back later.',\n        });\n        config = newConfig as RegistrationConfig;\n      }\n      \n      setRegistrationConfig(config);\n      setCustomClosureMessage(config.closureMessage);\n      \n      // Load time slot configurations\n      console.log('üîç Fetching time slots...');\n      const { data: timeSlotData, errors: timeSlotErrors } = await client.models.TimeSlotConfig.list();\n      \n      if (timeSlotErrors) {\n        console.error('‚ùå Time slot errors:', timeSlotErrors);\n        return; // Exit early if there are errors\n      } else {\n        console.log('‚úÖ Time slots loaded:', timeSlotData?.length || 0, timeSlotData);\n      }\n\n      // Load registrations\n      console.log('üîç Fetching registrations...');\n      const { data: registrationData, errors: registrationErrors } = await client.models.Registration.list();\n      \n      if (registrationErrors) {\n        console.error('‚ùå Registration errors:', registrationErrors);\n      } else {\n        console.log('‚úÖ Registrations loaded:', registrationData?.length || 0);\n        const registrations = registrationData as Registration[];\n        setRegistrations(registrations);\n        \n        // Update time slot counts with actual registration data\n        if (timeSlotData) {\n          const updatedTimeSlots = (timeSlotData as TimeSlotConfig[]).map(slot => {\n            const actualCount = registrations ? registrations.filter(reg => reg.timeSlot === slot.timeSlot).length : 0;\n            console.log(`üìä Time slot ${slot.timeSlot}: ${actualCount} actual registrations (was showing ${slot.currentRegistrations})`);\n            return {\n              ...slot,\n              currentRegistrations: actualCount\n            };\n          });\n          \n          // Sort time slots by time (earliest to latest)\n          const sortedTimeSlots = updatedTimeSlots.sort((a, b) => {\n            return a.timeSlot.localeCompare(b.timeSlot);\n          });\n          setTimeSlots(sortedTimeSlots);\n        }\n      }\n    } catch (error) {\n      console.error('üí• Error loading data:', error);\n      setMessage('‚ùå Authentication error. Please sign out and sign back in.');\n    }\n  };\n\n  const initializeTimeSlots = async () => {\n    setLoading(true);\n    try {\n      // Check if time slots already exist\n      const { data: existingSlots } = await client.models.TimeSlotConfig.list();\n      \n      if (existingSlots.length === 0) {\n        // Create default time slots with capacity of 20 each\n        const promises = TIME_SLOTS.map(slot =>\n          client.models.TimeSlotConfig.create({\n            timeSlot: slot,\n            maxCapacity: DEFAULT_CAPACITY,\n            currentRegistrations: 0,\n            isActive: true\n          })\n        );\n        \n        await Promise.all(promises);\n        setMessage('Time slots initialized successfully with 20 people per slot!');\n        loadData();\n      } else {\n        setMessage('Time slots already exist.');\n      }\n    } catch (error) {\n      console.error('Error initializing time slots:', error);\n      setMessage('Error initializing time slots.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateTimeSlotCapacity = async (id: string, newCapacity: number) => {\n    if (newCapacity < 0) {\n      setMessage('‚ùå Capacity cannot be negative!');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await client.models.TimeSlotConfig.update({\n        id,\n        maxCapacity: newCapacity\n      });\n      \n      // Update local state immediately for better UX\n      setTimeSlots(prev => prev.map(slot => \n        slot.id === id ? { ...slot, maxCapacity: newCapacity } : slot\n      ));\n      \n      setMessage(`‚úÖ Time slot capacity updated to ${newCapacity} people!`);\n      \n      // Reload data to ensure consistency\n      setTimeout(() => loadData(), 500);\n    } catch (error) {\n      console.error('Error updating capacity:', error);\n      setMessage('‚ùå Error updating capacity. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const addNewTimeSlot = async () => {\n    if (!newTimeSlot.trim()) {\n      setMessage('‚ùå Please enter a valid time slot!');\n      return;\n    }\n\n    // Check if time slot already exists\n    const exists = timeSlots.some(slot => slot.timeSlot === newTimeSlot);\n    if (exists) {\n      setMessage('‚ùå This time slot already exists!');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await client.models.TimeSlotConfig.create({\n        timeSlot: newTimeSlot,\n        maxCapacity: DEFAULT_CAPACITY,\n        currentRegistrations: 0,\n        isActive: true\n      });\n      \n      setMessage(`‚úÖ New time slot \"${newTimeSlot}\" added successfully!`);\n      setNewTimeSlot('');\n      loadData();\n    } catch (error) {\n      console.error('Error adding time slot:', error);\n      setMessage('‚ùå Error adding time slot. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const updateTimeSlotTime = async (id: string, newTime: string) => {\n    if (!newTime.trim()) {\n      setMessage('‚ùå Please enter a valid time!');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await client.models.TimeSlotConfig.update({\n        id,\n        timeSlot: newTime\n      });\n      \n      setMessage(`‚úÖ Time slot updated to \"${newTime}\"!`);\n      setEditingTimeSlot(null);\n      loadData();\n    } catch (error) {\n      console.error('Error updating time slot:', error);\n      setMessage('‚ùå Error updating time slot. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const deleteTimeSlot = async (id: string, timeSlot: string) => {\n    if (!confirm(`Are you sure you want to delete the ${timeSlot} time slot? This will also delete any registrations for this time slot.`)) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      await client.models.TimeSlotConfig.delete({ id });\n      \n      setMessage(`‚úÖ Time slot \"${timeSlot}\" deleted successfully!`);\n      loadData();\n    } catch (error) {\n      console.error('Error deleting time slot:', error);\n      setMessage('‚ùå Error deleting time slot. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const cleanupDuplicateTimeSlots = async () => {\n    try {\n      setLoading(true);\n      setMessage('üßπ Cleaning up duplicate time slots...');\n\n      const { data: allSlots } = await client.models.TimeSlotConfig.list();\n      \n      // Group by time slot to find duplicates\n      const timeSlotGroups: { [key: string]: TimeSlotConfig[] } = {};\n      allSlots?.forEach(slot => {\n        if (!timeSlotGroups[slot.timeSlot]) {\n          timeSlotGroups[slot.timeSlot] = [];\n        }\n        timeSlotGroups[slot.timeSlot].push(slot as TimeSlotConfig);\n      });\n\n      // Remove duplicates (keep the first one of each time)\n      let deletedCount = 0;\n      for (const [timeSlot, slots] of Object.entries(timeSlotGroups)) {\n        if (slots.length > 1) {\n          // Keep the first one, delete the rest\n          for (let i = 1; i < slots.length; i++) {\n            await client.models.TimeSlotConfig.delete({ id: slots[i].id });\n            deletedCount++;\n            console.log(`üóëÔ∏è Deleted duplicate time slot: ${timeSlot} (${slots[i].id})`);\n          }\n        }\n      }\n\n      setMessage(`‚úÖ Cleaned up ${deletedCount} duplicate time slots!`);\n      setTimeout(() => setMessage(''), 3000);\n      \n      // Reload data\n      await loadData();\n    } catch (error) {\n      console.error('Error cleaning up duplicates:', error);\n      setMessage('‚ùå Error cleaning up duplicates.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const generateInviteLink = async () => {\n    if (!inviteEmail.trim()) {\n      setMessage('Please enter an email address.');\n      return;\n    }\n\n    setLoading(true);\n    try {\n      const token = Math.random().toString(36).substr(2, 15);\n      \n      await client.models.InviteLink.create({\n        token,\n        email: inviteEmail,\n        isUsed: false,\n        createdAt: new Date().toISOString()\n      });\n\n      const inviteUrl = `${window.location.origin}/register/${token}`;\n      \n      navigator.clipboard.writeText(inviteUrl);\n      setMessage(`Invite link generated and copied to clipboard: ${inviteUrl}`);\n      setInviteEmail('');\n    } catch (error) {\n      console.error('Error generating invite link:', error);\n      setMessage('Error generating invite link.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const loadRegistrationConfig = async () => {\n    try {\n      const { data: configData } = await client.models.RegistrationConfig.list();\n      let config = configData?.[0] as RegistrationConfig;\n      \n      if (config) {\n        // Check if we need to auto-close based on scheduled date\n        if (config.autoCloseEnabled && config.scheduledCloseDate) {\n          const now = new Date();\n          const scheduledDate = new Date(config.scheduledCloseDate);\n          if (now >= scheduledDate && config.isRegistrationOpen) {\n            // Auto-close registration\n            const updatedConfig = await client.models.RegistrationConfig.update({\n              id: config.id,\n              isRegistrationOpen: false,\n              updatedAt: new Date().toISOString(),\n              updatedBy: 'admin-check'\n            });\n            config = updatedConfig.data as RegistrationConfig;\n            setMessage('üîí Registration automatically closed based on scheduled time');\n            setTimeout(() => setMessage(''), 3000);\n          }\n        }\n        \n        setRegistrationConfig(config);\n        setCustomClosureMessage(config.closureMessage);\n      }\n    } catch (error) {\n      console.error('Error loading registration config:', error);\n    }\n  };\n\n  const updateRegistrationStatus = async (field: string, value: any) => {\n    if (!registrationConfig) return;\n\n    try {\n      setLoading(true);\n      const updatedConfig = await client.models.RegistrationConfig.update({\n        id: registrationConfig.id,\n        [field]: value,\n        updatedAt: new Date().toISOString()\n      });\n\n      setRegistrationConfig(updatedConfig.data as RegistrationConfig);\n      setMessage(`‚úÖ Registration ${field.replace(/([A-Z])/g, ' $1').toLowerCase()} updated!`);\n      \n      setTimeout(() => setMessage(''), 2000);\n    } catch (error) {\n      console.error('Error updating registration status:', error);\n      setMessage('‚ùå Error updating registration settings.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const toggleRegistrationOpen = () => {\n    updateRegistrationStatus('isRegistrationOpen', !registrationConfig?.isRegistrationOpen);\n  };\n\n  const toggleInviteOnlyMode = () => {\n    updateRegistrationStatus('inviteOnlyMode', !registrationConfig?.inviteOnlyMode);\n  };\n\n  const scheduleRegistrationClosure = async () => {\n    if (!registrationConfig || !scheduledCloseDate) return;\n\n    const scheduledDateTime = scheduledCloseTime \n      ? `${scheduledCloseDate}T${scheduledCloseTime}:00.000Z`\n      : `${scheduledCloseDate}T23:59:59.000Z`;\n\n    try {\n      setLoading(true);\n      const updatedConfig = await client.models.RegistrationConfig.update({\n        id: registrationConfig.id,\n        scheduledCloseDate: scheduledDateTime,\n        autoCloseEnabled: true,\n        closureMessage: customClosureMessage || 'Registration is currently closed. Please check back later.',\n        updatedAt: new Date().toISOString()\n      });\n\n      setRegistrationConfig(updatedConfig.data as RegistrationConfig);\n      setMessage('‚úÖ Scheduled closure updated! Registration will automatically close at the specified time.');\n      \n      setTimeout(() => setMessage(''), 3000);\n    } catch (error) {\n      console.error('Error scheduling closure:', error);\n      setMessage('‚ùå Error scheduling registration closure.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const sendConfirmationEmails = async () => {\n    try {\n      setLoading(true);\n      setMessage('üìß Preparing confirmation emails...');\n\n      // First, update all registrations with confirmation tokens\n      const updatedRegistrations = await Promise.all(\n        registrations.map(async (reg) => {\n          if (!reg.confirmationToken && !reg.isCancelled) {\n            const token = Math.random().toString(36).substr(2, 15) + Date.now().toString(36);\n            await client.models.Registration.update({\n              id: reg.id,\n              confirmationToken: token\n            });\n            return { ...reg, confirmationToken: token };\n          }\n          return reg;\n        })\n      );\n\n      // Filter out cancelled registrations\n      const activeRegistrations = updatedRegistrations.filter(reg => !reg.isCancelled);\n\n      if (activeRegistrations.length === 0) {\n        setMessage('‚ö†Ô∏è No active registrations to send confirmation emails to.');\n        return;\n      }\n\n      setMessage(`üìß Sending confirmation emails to ${activeRegistrations.length} registrations...`);\n\n      // Note: In a real implementation, you would call the Lambda function here\n      // For now, we'll simulate the process\n      setTimeout(() => {\n        setMessage(`‚úÖ Sent confirmation emails to ${activeRegistrations.length} registrations! Check the email inboxes.`);\n        setTimeout(() => setMessage(''), 5000);\n      }, 2000);\n\n    } catch (error) {\n      console.error('Error sending confirmation emails:', error);\n      setMessage('‚ùå Error sending confirmation emails. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const filteredRegistrations = registrations.filter(reg => \n    reg.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    reg.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    reg.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    reg.phone.includes(searchTerm) ||\n    reg.timeSlot.includes(searchTerm)\n  );\n\n  const startEdit = (registration: Registration) => {\n    setEditingRegistration(registration.id);\n    setEditFormData({ ...registration });\n  };\n\n  const cancelEdit = () => {\n    setEditingRegistration(null);\n    setEditFormData(null);\n  };\n\n  const saveEdit = async () => {\n    if (!editFormData || !editingRegistration) return;\n\n    try {\n      await client.models.Registration.update({\n        id: editingRegistration,\n        firstName: editFormData.firstName,\n        lastName: editFormData.lastName,\n        email: editFormData.email,\n        phone: editFormData.phone,\n        timeSlot: editFormData.timeSlot,\n        numberOfKids: editFormData.numberOfKids,\n        needsChildcare: editFormData.needsChildcare,\n        referredBy: editFormData.referredBy\n      });\n      \n      await loadData();\n      setMessage('Registration updated successfully!');\n      cancelEdit();\n    } catch (error) {\n      console.error('Error updating registration:', error);\n      setMessage('Error updating registration.');\n    }\n  };\n\n  const deleteRegistration = async (id: string) => {\n    if (!confirm('Are you sure you want to delete this registration?')) return;\n    \n    try {\n      await client.models.Registration.delete({ id });\n      await loadData();\n      setMessage('Registration deleted successfully!');\n    } catch (error) {\n      console.error('Error deleting registration:', error);\n      setMessage('Error deleting registration.');\n    }\n  };\n\n  const exportRegistrations = () => {\n    const csvContent = [\n      ['Name', 'Email', 'Phone', 'Time Slot', 'Number of Kids', 'Needs Childcare', 'Referred By', 'Registration Date'],\n      ...registrations.map(reg => [\n        `${reg.firstName} ${reg.lastName}`,\n        reg.email,\n        reg.phone,\n        reg.timeSlot,\n        reg.numberOfKids.toString(),\n        reg.needsChildcare ? 'Yes' : 'No',\n        reg.referredBy || '',\n        new Date(reg.registrationDate).toLocaleDateString()\n      ])\n    ].map(row => row.map(cell => `\"${cell}\"`).join(',')).join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    const url = URL.createObjectURL(blob);\n    link.setAttribute('href', url);\n    link.setAttribute('download', 'christmas-store-registrations.csv');\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  return (\n    <div className=\"max-w-7xl mx-auto p-6\">\n      <div className=\"p-8 rounded-lg mb-8 text-white\" \n           style={{ background: `linear-gradient(135deg, ${BRANDING.primaryColor}, ${BRANDING.secondaryColor})` }}>\n        <div className=\"flex items-center justify-center mb-4\">\n          <div className=\"text-6xl mr-4\">{BRANDING.locationEmoji}</div>\n          <div>\n            <h1 className=\"text-4xl font-bold mb-2\">Christmas Store Admin</h1>\n            <p className=\"text-lg opacity-90\">{LOCATION_NAME}</p>\n          </div>\n        </div>\n        <p className=\"text-center opacity-80\">Manage registrations and time slots</p>\n      </div>\n      \n      {message && (\n        <div className=\"mb-6 p-4 bg-blue-500 text-white rounded-lg shadow-lg\">\n          <div className=\"flex items-center\">\n            <span className=\"text-2xl mr-2\">‚ÑπÔ∏è</span>\n            {message}\n          </div>\n        </div>\n      )}\n\n      {/* Registration Settings */}\n      <div className=\"bg-purple-50 border-2 border-purple-200 rounded-lg p-6 mb-8\">\n        <h2 className=\"text-2xl font-bold text-purple-800 flex items-center mb-6\">\n          ‚öôÔ∏è Registration Settings\n        </h2>\n        \n        {registrationConfig && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Registration Status */}\n            <div className=\"bg-white border-2 border-purple-300 rounded-lg p-4\">\n              <h3 className=\"font-bold text-purple-700 mb-3 flex items-center\">\n                üéØ Registration Status\n              </h3>\n              <div className=\"space-y-3\">\n                <div className={`px-3 py-2 rounded-lg font-semibold text-center ${\n                  registrationConfig.isRegistrationOpen \n                    ? 'bg-green-100 text-green-800' \n                    : 'bg-red-100 text-red-800'\n                }`}>\n                  {registrationConfig.isRegistrationOpen ? '‚úÖ OPEN' : 'üî¥ CLOSED'}\n                </div>\n                \n                <button\n                  onClick={toggleRegistrationOpen}\n                  disabled={loading}\n                  className={`w-full px-4 py-2 rounded-lg font-semibold transition-all ${\n                    registrationConfig.isRegistrationOpen\n                      ? 'bg-red-600 hover:bg-red-700 text-white'\n                      : 'bg-green-600 hover:bg-green-700 text-white'\n                  } disabled:opacity-50`}\n                >\n                  {registrationConfig.isRegistrationOpen ? 'üîí Close Registration' : 'üîì Open Registration'}\n                </button>\n              </div>\n            </div>\n\n            {/* Invite Only Mode */}\n            <div className=\"bg-white border-2 border-purple-300 rounded-lg p-4\">\n              <h3 className=\"font-bold text-purple-700 mb-3 flex items-center\">\n                üìß Access Mode\n              </h3>\n              <div className=\"space-y-3\">\n                <div className={`px-3 py-2 rounded-lg font-semibold text-center ${\n                  registrationConfig.inviteOnlyMode\n                    ? 'bg-orange-100 text-orange-800'\n                    : 'bg-blue-100 text-blue-800'\n                }`}>\n                  {registrationConfig.inviteOnlyMode ? 'üîê INVITE ONLY' : 'üåê PUBLIC'}\n                </div>\n                \n                <button\n                  onClick={toggleInviteOnlyMode}\n                  disabled={loading}\n                  className={`w-full px-4 py-2 rounded-lg font-semibold transition-all ${\n                    registrationConfig.inviteOnlyMode\n                      ? 'bg-blue-600 hover:bg-blue-700 text-white'\n                      : 'bg-orange-600 hover:bg-orange-700 text-white'\n                  } disabled:opacity-50`}\n                >\n                  {registrationConfig.inviteOnlyMode ? 'üåê Enable Public Access' : 'üîê Enable Invite Only'}\n                </button>\n              </div>\n            </div>\n\n            {/* Scheduled Closure */}\n            <div className=\"bg-white border-2 border-purple-300 rounded-lg p-4\">\n              <h3 className=\"font-bold text-purple-700 mb-3 flex items-center\">\n                ‚è∞ Scheduled Closure\n              </h3>\n              \n              {registrationConfig.scheduledCloseDate && registrationConfig.autoCloseEnabled && (\n                <div className=\"mb-3 p-2 bg-yellow-100 text-yellow-800 rounded text-sm\">\n                  üìÖ Scheduled: {new Date(registrationConfig.scheduledCloseDate).toLocaleString()}\n                </div>\n              )}\n              \n              <div className=\"space-y-2\">\n                <input\n                  type=\"date\"\n                  value={scheduledCloseDate}\n                  onChange={(e) => setScheduledCloseDate(e.target.value)}\n                  className=\"w-full px-3 py-2 border-2 border-gray-300 rounded text-sm\"\n                  placeholder=\"Select date\"\n                />\n                <input\n                  type=\"time\"\n                  value={scheduledCloseTime}\n                  onChange={(e) => setScheduledCloseTime(e.target.value)}\n                  className=\"w-full px-3 py-2 border-2 border-gray-300 rounded text-sm\"\n                  placeholder=\"Select time (optional)\"\n                />\n                <button\n                  onClick={scheduleRegistrationClosure}\n                  disabled={loading || !scheduledCloseDate}\n                  className=\"w-full bg-yellow-600 hover:bg-yellow-700 text-white px-4 py-2 rounded-lg font-semibold disabled:opacity-50\"\n                >\n                  ‚è∞ Schedule Closure\n                </button>\n                \n                {registrationConfig?.autoCloseEnabled && (\n                  <div className=\"pt-2 border-t border-gray-200\">\n                    <p className=\"text-xs text-gray-600 mb-2\">\n                      üîß Test scheduled closure (for development)\n                    </p>\n                    <button\n                      onClick={async () => {\n                        try {\n                          setLoading(true);\n                          // This would be used to manually trigger the auto-close function\n                          setMessage('üîÑ Checking scheduled closure...');\n                          // For now, just reload the data to check if it should close\n                          await loadRegistrationConfig();\n                          setMessage('‚úÖ Checked scheduled closure');\n                          setTimeout(() => setMessage(''), 2000);\n                        } catch (error) {\n                          setMessage('‚ùå Error checking scheduled closure');\n                        } finally {\n                          setLoading(false);\n                        }\n                      }}\n                      disabled={loading}\n                      className=\"w-full bg-gray-500 hover:bg-gray-600 text-white px-3 py-1 rounded text-xs font-medium disabled:opacity-50\"\n                    >\n                      üîç Check Now\n                    </button>\n                  </div>\n                )}\n              </div>\n            </div>\n\n            {/* Closure Message */}\n            <div className=\"md:col-span-2 lg:col-span-3 bg-white border-2 border-purple-300 rounded-lg p-4\">\n              <h3 className=\"font-bold text-purple-700 mb-3 flex items-center\">\n                üí¨ Closure Message\n              </h3>\n              <div className=\"space-y-3\">\n                <textarea\n                  value={customClosureMessage}\n                  onChange={(e) => setCustomClosureMessage(e.target.value)}\n                  className=\"w-full px-3 py-2 border-2 border-gray-300 rounded text-sm h-20\"\n                  placeholder=\"Message shown when registration is closed\"\n                />\n                <button\n                  onClick={() => updateRegistrationStatus('closureMessage', customClosureMessage)}\n                  disabled={loading}\n                  className=\"bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-lg font-semibold disabled:opacity-50\"\n                >\n                  üíæ Save Message\n                </button>\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8\">\n        {/* Time Slot Management */}\n        <div className=\"bg-blue-50 border-2 border-blue-200 rounded-lg p-6\">\n          <div className=\"flex justify-between items-center mb-4\">\n            <h2 className=\"text-2xl font-bold text-blue-800 flex items-center\">\n              ‚è∞ Time Slot Management\n            </h2>\n            {timeSlots.length > 6 && (\n              <button\n                onClick={cleanupDuplicateTimeSlots}\n                disabled={loading}\n                className=\"bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 font-bold disabled:opacity-50\"\n              >\n                üßπ Clean Up Duplicates\n              </button>\n            )}\n          </div>\n          \n          <div className=\"space-y-3\">\n            {timeSlots.length === 0 ? (\n              <div className=\"text-center py-8 bg-white border-2 border-blue-200 rounded-lg\">\n                <div className=\"text-4xl mb-4\">{loading ? 'üîÑ' : '‚ö†Ô∏è'}</div>\n                <p className=\"text-blue-800 mb-2 text-lg font-semibold\">\n                  {loading ? 'Setting up time slots...' : 'Time slots not found'}\n                </p>\n                <p className=\"text-blue-600 mb-4\">\n                  {loading \n                    ? 'Please wait while we initialize the default time slots.' \n                    : 'Click the button below to create the default time slots.'\n                  }\n                </p>\n                {!loading && (\n                  <div className=\"space-x-4\">\n                    <button\n                      onClick={initializeTimeSlots}\n                      disabled={loading}\n                      className=\"bg-blue-600 text-white px-6 py-3 rounded-lg hover:bg-blue-700 disabled:opacity-50 font-bold\"\n                    >\n                      üöÄ Create Time Slots\n                    </button>\n                    <button\n                      onClick={loadData}\n                      disabled={loading}\n                      className=\"bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:opacity-50 font-bold\"\n                    >\n                      üîÑ Refresh Data\n                    </button>\n                  </div>\n                )}\n                <div className=\"mt-4 text-xs text-gray-500\">\n                  <p>Debug info: timeSlots.length = {timeSlots.length}</p>\n                  <p>Loading state: {loading ? 'true' : 'false'}</p>\n                  {timeSlots.length > 0 && <p>Time slots found but not displaying - check console</p>}\n                </div>\n              </div>\n            ) : (\n              timeSlots.map(slot => {\n                const percentage = (slot.currentRegistrations / slot.maxCapacity) * 100;\n                const statusColor = percentage >= 100 ? 'bg-red-500' : percentage >= 80 ? 'bg-yellow-500' : 'bg-green-500';\n                const statusEmoji = percentage >= 100 ? 'üî¥' : percentage >= 80 ? 'üü°' : 'üü¢';\n                \n                return (\n                  <div key={slot.id} className=\"bg-white border-2 border-blue-300 rounded-lg p-4 hover:shadow-lg transition-all\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex-1\">\n                        {editingTimeSlot === slot.id ? (\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"time\"\n                              defaultValue={slot.timeSlot}\n                              onBlur={(e) => updateTimeSlotTime(slot.id, e.target.value)}\n                              onKeyDown={(e) => {\n                                if (e.key === 'Enter') {\n                                  updateTimeSlotTime(slot.id, e.currentTarget.value);\n                                }\n                                if (e.key === 'Escape') {\n                                  setEditingTimeSlot(null);\n                                }\n                              }}\n                              className=\"px-3 py-1 border-2 border-blue-400 rounded font-bold text-blue-800\"\n                              autoFocus\n                            />\n                            <button\n                              onClick={() => setEditingTimeSlot(null)}\n                              className=\"text-gray-500 hover:text-gray-700\"\n                            >\n                              ‚ùå\n                            </button>\n                          </div>\n                        ) : (\n                          <div className=\"flex items-center space-x-2\">\n                            <span className=\"font-bold text-xl text-blue-800\">{statusEmoji} {slot.timeSlot}</span>\n                            <button\n                              onClick={() => setEditingTimeSlot(slot.id)}\n                              className=\"text-blue-500 hover:text-blue-700\"\n                            >\n                              ‚úèÔ∏è\n                            </button>\n                          </div>\n                        )}\n                        <div className=\"text-blue-600 font-semibold mt-1\">\n                          {slot.currentRegistrations}/{slot.maxCapacity} registered ({percentage.toFixed(0)}%)\n                        </div>\n                        <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\n                          <div className={`${statusColor} h-2 rounded-full transition-all`} style={{width: `${Math.min(percentage, 100)}%`}}></div>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"text-blue-700 font-bold\">Max:</span>\n                        <div className=\"flex items-center border-2 border-blue-300 rounded-lg overflow-hidden\">\n                          <button\n                            onClick={() => updateTimeSlotCapacity(slot.id, Math.max(0, slot.maxCapacity - 1))}\n                            className=\"bg-blue-500 text-white px-3 py-2 hover:bg-blue-600 font-bold text-lg\"\n                            disabled={loading}\n                          >\n                            ‚àí\n                          </button>\n                          <input\n                            type=\"number\"\n                            value={slot.maxCapacity}\n                            onChange={(e) => {\n                              const newValue = parseInt(e.target.value) || 0;\n                              if (newValue !== slot.maxCapacity) {\n                                updateTimeSlotCapacity(slot.id, newValue);\n                              }\n                            }}\n                            onBlur={(e) => {\n                              const newValue = parseInt(e.target.value) || 0;\n                              if (newValue !== slot.maxCapacity) {\n                                updateTimeSlotCapacity(slot.id, newValue);\n                              }\n                            }}\n                            className=\"w-20 px-3 py-2 text-center text-gray-900 font-bold focus:ring-2 focus:ring-blue-500 border-0 focus:outline-none\"\n                            min=\"0\"\n                            step=\"1\"\n                          />\n                          <button\n                            onClick={() => updateTimeSlotCapacity(slot.id, slot.maxCapacity + 1)}\n                            className=\"bg-blue-500 text-white px-3 py-2 hover:bg-blue-600 font-bold text-lg\"\n                            disabled={loading}\n                          >\n                            +\n                          </button>\n                        </div>\n                        <button\n                          onClick={() => deleteTimeSlot(slot.id, slot.timeSlot)}\n                          className=\"bg-red-500 text-white px-3 py-2 rounded-lg hover:bg-red-600 font-bold\"\n                          disabled={loading}\n                        >\n                          üóëÔ∏è\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })\n            )}\n            \n            {/* Add New Time Slot - Always show */}\n            <div className=\"bg-gray-50 border-2 border-dashed border-blue-300 rounded-lg p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <span className=\"text-blue-700 font-bold\">‚ûï Add New Time Slot:</span>\n                <input\n                  type=\"time\"\n                  value={newTimeSlot}\n                  onChange={(e) => setNewTimeSlot(e.target.value)}\n                  placeholder=\"HH:MM\"\n                  className=\"px-3 py-2 border-2 border-blue-300 rounded-lg text-gray-900 font-bold focus:ring-2 focus:ring-blue-500\"\n                />\n                <button\n                  onClick={addNewTimeSlot}\n                  disabled={loading || !newTimeSlot}\n                  className=\"bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 font-bold disabled:opacity-50\"\n                >\n                  üöÄ Add Time Slot\n                </button>\n              </div>\n              <p className=\"text-sm text-gray-600 mt-2\">\n                üí° New time slots will start with 20 people capacity\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Invite Link Generator */}\n        <div className=\"bg-green-50 border-2 border-green-200 rounded-lg p-6\">\n          <h2 className=\"text-2xl font-bold text-green-800 mb-4 flex items-center\">\n            üîó Generate Invite Link\n          </h2>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"block text-green-700 font-bold mb-2\">\n                üìß Email Address (optional)\n              </label>\n              <input\n                type=\"email\"\n                value={inviteEmail}\n                onChange={(e) => setInviteEmail(e.target.value)}\n                placeholder=\"recipient@example.com\"\n                className=\"w-full px-4 py-3 border-2 border-green-300 rounded-lg text-gray-900 font-medium focus:ring-2 focus:ring-green-500\"\n              />\n            </div>\n            <button\n              onClick={generateInviteLink}\n              disabled={loading}\n              className=\"w-full bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 disabled:opacity-50 font-bold text-lg\"\n            >\n              {loading ? '‚è≥ Generating...' : 'üöÄ Generate Invite Link'}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      {/* Registration Management */}\n      <div className=\"bg-purple-50 border-2 border-purple-200 rounded-lg p-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center justify-between mb-6 space-y-4 sm:space-y-0\">\n          <h2 className=\"text-2xl font-bold text-purple-800 flex items-center\">\n            üë• Registration Management ({filteredRegistrations.length} of {registrations.length})\n          </h2>\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={sendConfirmationEmails}\n              disabled={loading || registrations.length === 0}\n              className=\"bg-orange-600 text-white px-6 py-3 rounded-lg hover:bg-orange-700 font-bold flex items-center disabled:opacity-50\"\n            >\n              {loading ? 'üìß Sending...' : 'üìß Send Confirmation Emails'}\n            </button>\n            <button\n              onClick={exportRegistrations}\n              className=\"bg-purple-600 text-white px-6 py-3 rounded-lg hover:bg-purple-700 font-bold flex items-center\"\n            >\n              üì• Export CSV\n            </button>\n          </div>\n        </div>\n        \n        {/* Search Bar */}\n        <div className=\"mb-6\">\n          <div className=\"relative\">\n            <input\n              type=\"text\"\n              placeholder=\"üîç Search by name, email, phone, or time slot...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"w-full px-4 py-3 pl-12 border-2 border-purple-300 rounded-lg text-gray-900 font-medium focus:ring-2 focus:ring-purple-500\"\n            />\n            <div className=\"absolute left-4 top-3.5 text-purple-500 text-xl\">üîç</div>\n          </div>\n        </div>\n        \n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n          <div className=\"bg-blue-200 border-2 border-blue-400 p-4 rounded-lg text-center\">\n            <div className=\"text-4xl mb-2\">üë•</div>\n            <h3 className=\"font-bold text-blue-800 text-lg\">TOTAL REGISTRATIONS</h3>\n            <p className=\"text-3xl font-bold text-blue-900\">{registrations.length}</p>\n          </div>\n          <div className=\"bg-green-200 border-2 border-green-400 p-4 rounded-lg text-center\">\n            <div className=\"text-4xl mb-2\">üë∂</div>\n            <h3 className=\"font-bold text-green-800 text-lg\">TOTAL CHILDREN</h3>\n            <p className=\"text-3xl font-bold text-green-900\">\n              {registrations.reduce((sum, reg) => sum + reg.numberOfKids, 0)}\n            </p>\n          </div>\n          <div className=\"bg-yellow-200 border-2 border-yellow-400 p-4 rounded-lg text-center\">\n            <div className=\"text-4xl mb-2\">üçº</div>\n            <h3 className=\"font-bold text-yellow-800 text-lg\">NEED CHILDCARE</h3>\n            <p className=\"text-3xl font-bold text-yellow-900\">\n              {registrations.filter(reg => reg.needsChildcare).length}\n            </p>\n          </div>\n        </div>\n\n        <div className=\"space-y-4\">\n          {filteredRegistrations.length === 0 ? (\n            <div className=\"text-center py-8 bg-white border-2 border-purple-200 rounded-lg\">\n              <div className=\"text-6xl mb-4\">üìù</div>\n              <p className=\"text-xl font-bold text-purple-800\">No registrations found</p>\n              <p className=\"text-purple-600\">Try adjusting your search terms</p>\n            </div>\n          ) : (\n            filteredRegistrations.map((reg) => (\n              <div key={reg.id} className=\"bg-white border-2 border-purple-200 rounded-lg p-4 hover:shadow-lg transition-all\">\n                {editingRegistration === reg.id ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <input\n                        type=\"text\"\n                        value={editFormData?.firstName || ''}\n                        onChange={(e) => setEditFormData(prev => prev ? {...prev, firstName: e.target.value} : null)}\n                        className=\"px-3 py-2 border-2 border-blue-300 rounded-lg font-bold\"\n                        placeholder=\"First Name\"\n                      />\n                      <input\n                        type=\"text\"\n                        value={editFormData?.lastName || ''}\n                        onChange={(e) => setEditFormData(prev => prev ? {...prev, lastName: e.target.value} : null)}\n                        className=\"px-3 py-2 border-2 border-blue-300 rounded-lg font-bold\"\n                        placeholder=\"Last Name\"\n                      />\n                      <input\n                        type=\"email\"\n                        value={editFormData?.email || ''}\n                        onChange={(e) => setEditFormData(prev => prev ? {...prev, email: e.target.value} : null)}\n                        className=\"px-3 py-2 border-2 border-blue-300 rounded-lg font-bold\"\n                        placeholder=\"Email\"\n                      />\n                      <input\n                        type=\"tel\"\n                        value={editFormData?.phone || ''}\n                        onChange={(e) => setEditFormData(prev => prev ? {...prev, phone: e.target.value} : null)}\n                        className=\"px-3 py-2 border-2 border-blue-300 rounded-lg font-bold\"\n                        placeholder=\"Phone\"\n                      />\n                      <select\n                        value={editFormData?.timeSlot || ''}\n                        onChange={(e) => setEditFormData(prev => prev ? {...prev, timeSlot: e.target.value} : null)}\n                        className=\"px-3 py-2 border-2 border-blue-300 rounded-lg font-bold\"\n                      >\n                        {['09:00', '09:30', '10:00', '10:30', '11:00', '11:30'].map(slot => (\n                          <option key={slot} value={slot}>{slot}</option>\n                        ))}\n                      </select>\n                      <input\n                        type=\"number\"\n                        value={editFormData?.numberOfKids || 0}\n                        onChange={(e) => setEditFormData(prev => prev ? {...prev, numberOfKids: parseInt(e.target.value) || 0} : null)}\n                        className=\"px-3 py-2 border-2 border-blue-300 rounded-lg font-bold\"\n                        placeholder=\"Number of Kids\"\n                        min=\"0\"\n                      />\n                    </div>\n                    <div className=\"flex items-center space-x-4\">\n                      <label className=\"flex items-center space-x-2\">\n                        <input\n                          type=\"checkbox\"\n                          checked={editFormData?.needsChildcare || false}\n                          onChange={(e) => setEditFormData(prev => prev ? {...prev, needsChildcare: e.target.checked} : null)}\n                          className=\"w-4 h-4\"\n                        />\n                        <span className=\"font-bold text-gray-800\">Needs Childcare</span>\n                      </label>\n                    </div>\n                    <div className=\"flex space-x-3\">\n                      <button onClick={saveEdit} className=\"bg-green-500 text-white px-4 py-2 rounded-lg font-bold hover:bg-green-600\">\n                        üíæ Save\n                      </button>\n                      <button onClick={cancelEdit} className=\"bg-gray-500 text-white px-4 py-2 rounded-lg font-bold hover:bg-gray-600\">\n                        ‚ùå Cancel\n                      </button>\n                    </div>\n                  </div>\n                ) : (\n                  <div>\n                    <div className=\"flex flex-col md:flex-row md:items-center justify-between\">\n                      <div className=\"space-y-2\">\n                        <h3 className=\"text-xl font-bold text-purple-900\">{reg.firstName} {reg.lastName}</h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n                          <p className=\"text-purple-700\"><span className=\"font-bold\">üìß Email:</span> {reg.email}</p>\n                          <p className=\"text-purple-700\"><span className=\"font-bold\">üì± Phone:</span> {reg.phone}</p>\n                          <p className=\"text-purple-700\"><span className=\"font-bold\">‚è∞ Time:</span> <span className=\"bg-blue-200 px-2 py-1 rounded font-bold\">{reg.timeSlot}</span></p>\n                          <p className=\"text-purple-700\"><span className=\"font-bold\">üë∂ Kids:</span> {reg.numberOfKids}</p>\n                          <p className=\"text-purple-700\">\n                            <span className=\"font-bold\">üçº Childcare:</span> \n                            <span className={`px-2 py-1 rounded font-bold ml-1 ${reg.needsChildcare ? 'bg-green-200 text-green-800' : 'bg-gray-200 text-gray-800'}`}>\n                              {reg.needsChildcare ? 'YES' : 'NO'}\n                            </span>\n                          </p>\n                          {reg.referredBy && (\n                            <p className=\"text-purple-700\"><span className=\"font-bold\">üë§ Referred:</span> {reg.referredBy}</p>\n                          )}\n                          <p className=\"text-purple-700\">\n                            <span className=\"font-bold\">üìã Status:</span>\n                            {reg.isCancelled ? (\n                              <span className=\"bg-red-200 text-red-800 px-2 py-1 rounded font-bold ml-1\">‚ùå CANCELLED</span>\n                            ) : reg.attendanceConfirmed ? (\n                              <span className=\"bg-green-200 text-green-800 px-2 py-1 rounded font-bold ml-1\">‚úÖ CONFIRMED</span>\n                            ) : reg.confirmationToken ? (\n                              <span className=\"bg-yellow-200 text-yellow-800 px-2 py-1 rounded font-bold ml-1\">‚è≥ PENDING</span>\n                            ) : (\n                              <span className=\"bg-gray-200 text-gray-800 px-2 py-1 rounded font-bold ml-1\">üìù REGISTERED</span>\n                            )}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2 mt-4 md:mt-0\">\n                        <button onClick={() => startEdit(reg)} className=\"bg-blue-500 text-white px-4 py-2 rounded-lg font-bold hover:bg-blue-600\">\n                          ‚úèÔ∏è Edit\n                        </button>\n                        <button onClick={() => deleteRegistration(reg.id)} className=\"bg-red-500 text-white px-4 py-2 rounded-lg font-bold hover:bg-red-600\">\n                          üóëÔ∏è Delete\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst formFields = {\n  signIn: {\n    username: {\n      placeholder: 'Enter your admin email',\n      isRequired: true,\n      label: 'üéÑ Admin Email'\n    },\n    password: {\n      placeholder: 'Enter your password',\n      isRequired: true,\n      label: 'üîê Password'\n    }\n  }\n};\n\nconst components = {\n  Header() {\n    return (\n      <div className=\"text-center mb-8\">\n        <div className=\"text-6xl mb-4\">üéÑ</div>\n        <h1 className=\"text-4xl font-bold text-green-800 mb-2\">Christmas Store</h1>\n        <h2 className=\"text-2xl font-semibold text-red-600\">Admin Portal</h2>\n        <p className=\"text-gray-600 mt-2\">Please sign in to manage registrations</p>\n      </div>\n    );\n  },\n  Footer() {\n    return (\n      <div className=\"text-center mt-6\">\n        <p className=\"text-sm text-gray-500\">\n          üéÖ Ho ho ho! Welcome to the Christmas Store Admin Portal ü§∂\n        </p>\n      </div>\n    );\n  }\n};\n\nexport default function AdminPage() {\n  return (\n    <>\n      <style jsx global>{`\n        .amplify-authenticator {\n          min-height: 100vh;\n          background: linear-gradient(135deg, #f0fdf4 0%, #fef2f2 50%, #f0fdf4 100%);\n          display: flex;\n          align-items: center;\n          justify-content: center;\n          padding: 1rem;\n        }\n        .amplify-authenticator > div {\n          width: 100%;\n          max-width: 400px;\n        }\n      `}</style>\n      <ThemeProvider theme={christmasTheme}>\n        <Authenticator\n          formFields={formFields}\n          components={components}\n          hideSignUp={true}\n          socialProviders={[]}\n        >\n          {({ signOut, user }) => (\n            <div className=\"min-h-screen bg-gradient-to-br from-green-100 to-red-100\">\n              <div className=\"bg-gradient-to-r from-red-600 to-green-600 text-white shadow-lg\">\n                <div className=\"max-w-7xl mx-auto px-6 py-4 flex justify-between items-center\">\n                  <div className=\"flex items-center\">\n                    <div className=\"text-3xl mr-4\">üéÑ</div>\n                    <div>\n                      <h1 className=\"text-2xl font-bold\">Christmas Store Admin</h1>\n                      <p className=\"text-red-100\">Welcome, {user?.signInDetails?.loginId}</p>\n                    </div>\n                  </div>\n                  <button\n                    onClick={signOut}\n                    className=\"bg-white text-red-600 px-6 py-3 rounded-lg hover:bg-gray-100 font-bold flex items-center\"\n                  >\n                    üö™ Sign Out\n                  </button>\n                </div>\n              </div>\n              <div className=\"py-6\">\n                <AdminDashboard />\n              </div>\n            </div>\n          )}\n        </Authenticator>\n      </ThemeProvider>\n    </>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}