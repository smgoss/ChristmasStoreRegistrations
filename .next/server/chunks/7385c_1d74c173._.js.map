{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40smithy/shared-ini-file-loader/dist-es/getSsoSessionData.js"],"sourcesContent":["import { IniSectionType } from \"@smithy/types\";\nimport { CONFIG_PREFIX_SEPARATOR } from \"./loadSharedConfigFiles\";\nexport const getSsoSessionData = (data) => Object.entries(data)\n    .filter(([key]) => key.startsWith(IniSectionType.SSO_SESSION + CONFIG_PREFIX_SEPARATOR))\n    .reduce((acc, [key, value]) => ({ ...acc, [key.substring(key.indexOf(CONFIG_PREFIX_SEPARATOR) + 1)]: value }), {});\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACO,MAAM,oBAAoB,CAAC,OAAS,OAAO,OAAO,CAAC,MACrD,MAAM,CAAC,CAAC,CAAC,IAAI,GAAK,IAAI,UAAU,CAAC,wQAAc,CAAC,WAAW,GAAG,yTAAuB,GACrF,MAAM,CAAC,CAAC,KAAK,CAAC,KAAK,MAAM,GAAK,CAAC;YAAE,GAAG,GAAG;YAAE,CAAC,IAAI,SAAS,CAAC,IAAI,OAAO,CAAC,yTAAuB,IAAI,GAAG,EAAE;QAAM,CAAC,GAAG,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40smithy/shared-ini-file-loader/dist-es/loadSsoSessionData.js"],"sourcesContent":["import { getConfigFilepath } from \"./getConfigFilepath\";\nimport { getSsoSessionData } from \"./getSsoSessionData\";\nimport { parseIni } from \"./parseIni\";\nimport { slurpFile } from \"./slurpFile\";\nconst swallowError = () => ({});\nexport const loadSsoSessionData = async (init = {}) => slurpFile(init.configFilepath ?? getConfigFilepath())\n    .then(parseIni)\n    .then(getSsoSessionData)\n    .catch(swallowError);\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AACA,MAAM,eAAe,IAAM,CAAC,CAAC,CAAC;AACvB,MAAM,qBAAqB,OAAO,OAAO,CAAC,CAAC,GAAK,IAAA,+RAAS,EAAC,KAAK,cAAc,IAAI,IAAA,+SAAiB,KACpG,IAAI,CAAC,6RAAQ,EACb,IAAI,CAAC,+SAAiB,EACtB,KAAK,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 38, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js"],"sourcesContent":["export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n"],"names":[],"mappings":";;;;AAAO,MAAM,eAAe,CAAC,MAAQ,OACjC,CAAC,OAAO,IAAI,aAAa,KAAK,YAC1B,OAAO,IAAI,cAAc,KAAK,YAC9B,OAAO,IAAI,WAAW,KAAK,YAC3B,OAAO,IAAI,UAAU,KAAK,YAC1B,OAAO,IAAI,aAAa,KAAK,QAAQ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40smithy/property-provider/dist-es/TokenProviderError.js"],"sourcesContent":["import { ProviderError } from \"./ProviderError\";\nexport class TokenProviderError extends ProviderError {\n    constructor(message, options = true) {\n        super(message, options);\n        this.name = \"TokenProviderError\";\n        Object.setPrototypeOf(this, TokenProviderError.prototype);\n    }\n}\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,2BAA2B,4RAAa;IACjD,YAAY,OAAO,EAAE,UAAU,IAAI,CAAE;QACjC,KAAK,CAAC,SAAS;QACf,IAAI,CAAC,IAAI,GAAG;QACZ,OAAO,cAAc,CAAC,IAAI,EAAE,mBAAmB,SAAS;IAC5D;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 64, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40smithy/shared-ini-file-loader/dist-es/getSSOTokenFilepath.js"],"sourcesContent":["import { createHash } from \"crypto\";\nimport { join } from \"path\";\nimport { getHomeDir } from \"./getHomeDir\";\nexport const getSSOTokenFilepath = (id) => {\n    const hasher = createHash(\"sha1\");\n    const cacheName = hasher.update(id).digest(\"hex\");\n    return join(getHomeDir(), \".aws\", \"sso\", \"cache\", `${cacheName}.json`);\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AACO,MAAM,sBAAsB,CAAC;IAChC,MAAM,SAAS,IAAA,mHAAU,EAAC;IAC1B,MAAM,YAAY,OAAO,MAAM,CAAC,IAAI,MAAM,CAAC;IAC3C,OAAO,IAAA,yGAAI,EAAC,IAAA,iSAAU,KAAI,QAAQ,OAAO,SAAS,GAAG,UAAU,KAAK,CAAC;AACzE","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 83, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40smithy/shared-ini-file-loader/dist-es/getSSOTokenFromFile.js"],"sourcesContent":["import { promises as fsPromises } from \"fs\";\nimport { getSSOTokenFilepath } from \"./getSSOTokenFilepath\";\nconst { readFile } = fsPromises;\nexport const getSSOTokenFromFile = async (id) => {\n    const ssoTokenFilepath = getSSOTokenFilepath(id);\n    const ssoTokenText = await readFile(ssoTokenFilepath, \"utf8\");\n    return JSON.parse(ssoTokenText);\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACA,MAAM,EAAE,QAAQ,EAAE,GAAG,yGAAU;AACxB,MAAM,sBAAsB,OAAO;IACtC,MAAM,mBAAmB,IAAA,mTAAmB,EAAC;IAC7C,MAAM,eAAe,MAAM,SAAS,kBAAkB;IACtD,OAAO,KAAK,KAAK,CAAC;AACtB","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 101, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/token-providers/dist-es/constants.js"],"sourcesContent":["export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n"],"names":[],"mappings":";;;;;;AAAO,MAAM,mBAAmB,IAAI,KAAK;AAClC,MAAM,kBAAkB,CAAC,+EAA+E,CAAC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/token-providers/dist-es/getSsoOidcClient.js"],"sourcesContent":["export const getSsoOidcClient = async (ssoRegion, init = {}) => {\n    const { SSOOIDCClient } = await import(\"@aws-sdk/nested-clients/sso-oidc\");\n    const ssoOidcClient = new SSOOIDCClient(Object.assign({}, init.clientConfig ?? {}, {\n        region: ssoRegion ?? init.clientConfig?.region,\n        logger: init.clientConfig?.logger ?? init.parentClientConfig?.logger,\n    }));\n    return ssoOidcClient;\n};\n"],"names":[],"mappings":";;;;AAAO,MAAM,mBAAmB,OAAO,WAAW,OAAO,CAAC,CAAC;IACvD,MAAM,EAAE,aAAa,EAAE,GAAG;IAC1B,MAAM,gBAAgB,IAAI,cAAc,OAAO,MAAM,CAAC,CAAC,GAAG,KAAK,YAAY,IAAI,CAAC,GAAG;QAC/E,QAAQ,aAAa,KAAK,YAAY,EAAE;QACxC,QAAQ,KAAK,YAAY,EAAE,UAAU,KAAK,kBAAkB,EAAE;IAClE;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js"],"sourcesContent":["import { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = async (ssoToken, ssoRegion, init = {}) => {\n    const { CreateTokenCommand } = await import(\"@aws-sdk/nested-clients/sso-oidc\");\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,qBAAqB,OAAO,UAAU,WAAW,OAAO,CAAC,CAAC;IACnE,MAAM,EAAE,kBAAkB,EAAE,GAAG;IAC/B,MAAM,gBAAgB,MAAM,IAAA,oSAAgB,EAAC,WAAW;IACxD,OAAO,cAAc,IAAI,CAAC,IAAI,mBAAmB;QAC7C,UAAU,SAAS,QAAQ;QAC3B,cAAc,SAAS,YAAY;QACnC,cAAc,SAAS,YAAY;QACnC,WAAW;IACf;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/token-providers/dist-es/validateTokenExpiry.js"],"sourcesContent":["import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACO,MAAM,sBAAsB,CAAC;IAChC,IAAI,MAAM,UAAU,IAAI,MAAM,UAAU,CAAC,OAAO,KAAK,KAAK,GAAG,IAAI;QAC7D,MAAM,IAAI,sSAAkB,CAAC,CAAC,kBAAkB,EAAE,4RAAe,EAAE,EAAE;IACzE;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 166, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/token-providers/dist-es/validateTokenKey.js"],"sourcesContent":["import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACO,MAAM,mBAAmB,CAAC,KAAK,OAAO,aAAa,KAAK;IAC3D,IAAI,OAAO,UAAU,aAAa;QAC9B,MAAM,IAAI,sSAAkB,CAAC,CAAC,uBAAuB,EAAE,IAAI,cAAc,EAAE,aAAa,qBAAqB,GAAG,EAAE,EAAE,4RAAe,EAAE,EAAE;IAC3I;AACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 183, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js"],"sourcesContent":["import { getSSOTokenFilepath } from \"@smithy/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AACA,MAAM,EAAE,SAAS,EAAE,GAAG,yGAAU;AACzB,MAAM,sBAAsB,CAAC,IAAI;IACpC,MAAM,gBAAgB,IAAA,mTAAmB,EAAC;IAC1C,MAAM,cAAc,KAAK,SAAS,CAAC,UAAU,MAAM;IACnD,OAAO,UAAU,eAAe;AACpC","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 201, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/token-providers/dist-es/fromSso.js"],"sourcesContent":["import { TokenProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@smithy/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/token-providers - fromSso\");\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    });\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n"],"names":[],"mappings":"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","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 308, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, parentClientConfig, profile, logger, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            logger: clientConfig?.logger ?? parentClientConfig?.logger,\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}, } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const credentials = {\n        accessKeyId,\n        secretAccessKey,\n        sessionToken,\n        expiration: new Date(expiration),\n        ...(credentialScope && { credentialScope }),\n        ...(accountId && { accountId }),\n    };\n    if (ssoSession) {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO\", \"s\");\n    }\n    else {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO_LEGACY\", \"u\");\n    }\n    return credentials;\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AACA,MAAM,+BAA+B;AAC9B,MAAM,wBAAwB,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,YAAY,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,YAAY,EAAE,kBAAkB,EAAE,OAAO,EAAE,MAAM,EAAG;IACxK,IAAI;IACJ,MAAM,iBAAiB,CAAC,6EAA6E,CAAC;IACtG,IAAI,YAAY;QACZ,IAAI;YACA,MAAM,SAAS,MAAM,IAAA,kRAAmB,EAAC;gBAAE;YAAQ;YACnD,QAAQ;gBACJ,aAAa,OAAO,KAAK;gBACzB,WAAW,IAAI,KAAK,OAAO,UAAU,EAAE,WAAW;YACtD;QACJ,EACA,OAAO,GAAG;YACN,MAAM,IAAI,kTAAwB,CAAC,EAAE,OAAO,EAAE;gBAC1C,aAAa;gBACb;YACJ;QACJ;IACJ,OACK;QACD,IAAI;YACA,QAAQ,MAAM,IAAA,mTAAmB,EAAC;QACtC,EACA,OAAO,GAAG;YACN,MAAM,IAAI,kTAAwB,CAAC,CAAC,yDAAyD,EAAE,gBAAgB,EAAE;gBAC7G,aAAa;gBACb;YACJ;QACJ;IACJ;IACA,IAAI,IAAI,KAAK,MAAM,SAAS,EAAE,OAAO,KAAK,KAAK,GAAG,MAAM,GAAG;QACvD,MAAM,IAAI,kTAAwB,CAAC,CAAC,0DAA0D,EAAE,gBAAgB,EAAE;YAC9G,aAAa;YACb;QACJ;IACJ;IACA,MAAM,EAAE,WAAW,EAAE,GAAG;IACxB,MAAM,EAAE,SAAS,EAAE,yBAAyB,EAAE,GAAG;IACjD,MAAM,MAAM,aACR,IAAI,UAAU,OAAO,MAAM,CAAC,CAAC,GAAG,gBAAgB,CAAC,GAAG;QAChD,QAAQ,cAAc,UAAU,oBAAoB;QACpD,QAAQ,cAAc,UAAU;IACpC;IACJ,IAAI;IACJ,IAAI;QACA,UAAU,MAAM,IAAI,IAAI,CAAC,IAAI,0BAA0B;YACnD,WAAW;YACX,UAAU;YACV;QACJ;IACJ,EACA,OAAO,GAAG;QACN,MAAM,IAAI,kTAAwB,CAAC,GAAG;YAClC,aAAa;YACb;QACJ;IACJ;IACA,MAAM,EAAE,iBAAiB,EAAE,WAAW,EAAE,eAAe,EAAE,YAAY,EAAE,UAAU,EAAE,eAAe,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,EAAG,GAAG;IAC1H,IAAI,CAAC,eAAe,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,YAAY;QAClE,MAAM,IAAI,kTAAwB,CAAC,gDAAgD;YAC/E,aAAa;YACb;QACJ;IACJ;IACA,MAAM,cAAc;QAChB;QACA;QACA;QACA,YAAY,IAAI,KAAK;QACrB,GAAI,mBAAmB;YAAE;QAAgB,CAAC;QAC1C,GAAI,aAAa;YAAE;QAAU,CAAC;IAClC;IACA,IAAI,YAAY;QACZ,IAAA,sTAAoB,EAAC,aAAa,mBAAmB;IACzD,OACK;QACD,IAAA,sTAAoB,EAAC,aAAa,0BAA0B;IAChE;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 404, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const validateSsoProfile = (profile, logger) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger });\n    }\n    return profile;\n};\n"],"names":[],"mappings":";;;;AAAA;;AACO,MAAM,qBAAqB,CAAC,SAAS;IACxC,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG;IACrE,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,cAAc,CAAC,eAAe;QACpE,MAAM,IAAI,kTAAwB,CAAC,CAAC,0FAA0F,CAAC,GAC3H,CAAC,oDAAoD,EAAE,OAAO,IAAI,CAAC,SAAS,IAAI,CAAC,MAAM,oFAAoF,CAAC,EAAE;YAAE,aAAa;YAAO;QAAO;IACnN;IACA,OAAO;AACX","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/credential-provider-sso/dist-es/fromSSO.js"],"sourcesContent":["import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async ({ callerClientConfig } = {}) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-sso - fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    });\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {\n                logger: init.logger,\n            });\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            parentClientConfig: init.parentClientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"', { tryNextLink: false, logger: init.logger });\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            parentClientConfig: init.parentClientConfig,\n            profile: profileName,\n        });\n    }\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;;;;AACO,MAAM,UAAU,CAAC,OAAO,CAAC,CAAC,GAAK,OAAO,EAAE,kBAAkB,EAAE,GAAG,CAAC,CAAC;QACpE,KAAK,MAAM,EAAE,MAAM;QACnB,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,GAAG;QAC1E,MAAM,EAAE,SAAS,EAAE,GAAG;QACtB,MAAM,cAAc,IAAA,ySAAc,EAAC;YAC/B,SAAS,KAAK,OAAO,IAAI,oBAAoB;QACjD;QACA,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,aAAa,CAAC,eAAe,CAAC,YAAY;YAC5E,MAAM,WAAW,MAAM,IAAA,2SAAe,EAAC;YACvC,MAAM,UAAU,QAAQ,CAAC,YAAY;YACrC,IAAI,CAAC,SAAS;gBACV,MAAM,IAAI,kTAAwB,CAAC,CAAC,QAAQ,EAAE,YAAY,eAAe,CAAC,EAAE;oBAAE,QAAQ,KAAK,MAAM;gBAAC;YACtG;YACA,IAAI,CAAC,IAAA,uSAAY,EAAC,UAAU;gBACxB,MAAM,IAAI,kTAAwB,CAAC,CAAC,QAAQ,EAAE,YAAY,wCAAwC,CAAC,EAAE;oBACjG,QAAQ,KAAK,MAAM;gBACvB;YACJ;YACA,IAAI,SAAS,aAAa;gBACtB,MAAM,cAAc,MAAM,IAAA,iTAAkB,EAAC;gBAC7C,MAAM,UAAU,WAAW,CAAC,QAAQ,WAAW,CAAC;gBAChD,MAAM,cAAc,CAAC,2BAA2B,EAAE,YAAY,iBAAiB,EAAE,QAAQ,WAAW,EAAE;gBACtG,IAAI,aAAa,cAAc,QAAQ,UAAU,EAAE;oBAC/C,MAAM,IAAI,kTAAwB,CAAC,CAAC,sBAAsB,CAAC,GAAG,aAAa;wBACvE,aAAa;wBACb,QAAQ,KAAK,MAAM;oBACvB;gBACJ;gBACA,IAAI,eAAe,gBAAgB,QAAQ,aAAa,EAAE;oBACtD,MAAM,IAAI,kTAAwB,CAAC,CAAC,yBAAyB,CAAC,GAAG,aAAa;wBAC1E,aAAa;wBACb,QAAQ,KAAK,MAAM;oBACvB;gBACJ;gBACA,QAAQ,UAAU,GAAG,QAAQ,UAAU;gBACvC,QAAQ,aAAa,GAAG,QAAQ,aAAa;YACjD;YACA,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,UAAU,EAAE,aAAa,EAAE,WAAW,EAAE,GAAG,IAAA,mTAAkB,EAAC,SAAS,KAAK,MAAM;YACzH,OAAO,IAAA,yTAAqB,EAAC;gBACzB,aAAa;gBACb,YAAY;gBACZ,cAAc;gBACd,WAAW;gBACX,aAAa;gBACb,WAAW;gBACX,cAAc,KAAK,YAAY;gBAC/B,oBAAoB,KAAK,kBAAkB;gBAC3C,SAAS;YACb;QACJ,OACK,IAAI,CAAC,eAAe,CAAC,gBAAgB,CAAC,aAAa,CAAC,aAAa;YAClE,MAAM,IAAI,kTAAwB,CAAC,wEAC/B,6DAA6D;gBAAE,aAAa;gBAAO,QAAQ,KAAK,MAAM;YAAC;QAC/G,OACK;YACD,OAAO,IAAA,yTAAqB,EAAC;gBACzB;gBACA;gBACA;gBACA;gBACA;gBACA;gBACA,cAAc,KAAK,YAAY;gBAC/B,oBAAoB,KAAK,kBAAkB;gBAC3C,SAAS;YACb;QACJ;IACJ","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 514, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 520, "column": 0}, "map": {"version":3,"sources":["file:///Users/stephengoss/GitHub/ChristmasStoreRegistrations/christmas-store-registration/node_modules/%40aws-sdk/client-lambda/node_modules/%40aws-sdk/credential-provider-sso/dist-es/index.js"],"sourcesContent":["export * from \"./fromSSO\";\nexport * from \"./isSsoProfile\";\nexport * from \"./types\";\nexport * from \"./validateSsoProfile\";\n"],"names":[],"mappings":";AAAA;AACA;AACA;AACA","ignoreList":[0],"debugId":null}}]
}